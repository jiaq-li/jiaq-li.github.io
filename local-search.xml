<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MAI比赛开发日志1</title>
    <link href="/2022/06/02/MAI%E6%AF%94%E8%B5%9B(1)/"/>
    <url>/2022/06/02/MAI%E6%AF%94%E8%B5%9B(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="Conda-Miniconda相关命令"><a href="#Conda-Miniconda相关命令" class="headerlink" title="Conda/Miniconda相关命令"></a>Conda/Miniconda相关命令</h1><ul><li>conda create -n [name] python=x.x 创建环境</li><li>conda info –envs 查看本地环境</li><li>conda create -n [name] –clone [path] 通过上一句查看路径进行本地环境复制（“深拷贝”）</li><li>conda activate [name]</li><li>conda env export &gt; [name].yaml 将当前activate的环境导出参数文件，移植</li><li>conda env create -f [name].yaml 新环境移植生效</li><li>conda remove –name [name] –all 删除环境</li><li>改名建议info -e后直接去路径改文件夹名字就可以了</li></ul><h1 id="Linux相关命令-amp-Shell语法"><a href="#Linux相关命令-amp-Shell语法" class="headerlink" title="Linux相关命令&amp;Shell语法"></a>Linux相关命令&amp;Shell语法</h1><ul><li><p>df -hl 磁盘剩余容量</p></li><li><p>ls -lht 当前目录下文件大小和总和</p></li><li><p>cat /proc/meminfo 查内存  cat /proc/version 查系统版本</p></li><li><p>```shell<br>#有人之前想把数据集传回Windows本地处理再传上去，脚本几行就能干了<br>source=”/data0/lijiaqi/mai/depth_train/train/labels/depth/“ #源目录<br>des=”/data0/lijiaqi/mai/depth_train/val/labels/depth/“ #目标目录<br>for i in $(seq 739)<br>do</p><pre><code class="hljs">mv $source$i&quot;.png&quot; $des;</code></pre><p>done<br>#或者<br>for i in {0..739}<br>do</p><pre><code class="hljs">mv $&#123;source&#125;$&#123;i&#125;&quot;.png&quot; $&#123;des&#125;</code></pre><p>done</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- to be <span class="hljs-keyword">continue</span>..<br><br><br><br><br><br><span class="hljs-comment"># CUDA&amp;cudnn配置</span><br><br><span class="hljs-number">1</span>. CUDA版本与显卡型号、**驱动版本**有关，可以去官网查，不过一般我们的其他部分如tensorflow对cuda有要求，装满足要求的最新版本就行<br><br>&lt;a href=<span class="hljs-string">&quot;https://sm.ms/image/XqWdgfVFQtRbhAp&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;&lt;img src=<span class="hljs-string">&quot;D:/ULB/hexoblog/themes/fluid/source/img/MAI%E6%AF%94%E8%B5%9B(1)/XqWdgfVFQtRbhAp.png&quot;</span> &gt;&lt;/a&gt;<br><br><span class="hljs-comment">## 非root用户装CUDA：</span><br><br><span class="hljs-number">1</span>. [CUDA Toolkit Archive | NVIDIA Developer](https:<span class="hljs-regexp">//</span>developer.nvidia.com/cuda-toolkit-archive)挑一个，一般就<span class="hljs-number">10.0</span>，<span class="hljs-number">10.1</span>，<span class="hljs-number">10.2</span>，<span class="hljs-number">11.0</span>，<span class="hljs-number">11.2</span><br>   以<span class="hljs-number">11.2</span>为例，这么选<br>   ![image.png](https:<span class="hljs-regexp">//</span>s2.loli.net<span class="hljs-regexp">/2022/</span><span class="hljs-number">06</span><span class="hljs-regexp">/02/</span>sDhEU5k7Nv9FaCQ.png)<br>   <br><span class="hljs-number">2</span>. cd到合适目录，<br><br>   ```sh<br>   wget https:<span class="hljs-regexp">//</span>developer.download.nvidia.com<span class="hljs-regexp">/compute/</span>cuda<span class="hljs-regexp">/11.2.0/</span>local_installers/cuda_11.<span class="hljs-number">2.0</span>_460.<span class="hljs-number">27.04</span>_linux.run<br>   <span class="hljs-comment">#完成之后</span><br>   chmod <span class="hljs-number">755</span> cuda_11.<span class="hljs-number">2.0</span>_460.<span class="hljs-number">27.04</span>_linux.run<br>   <span class="hljs-comment">#可能加.run可能不加</span><br>   <span class="hljs-comment">#或者</span><br>   chmod +x cuda_11.<span class="hljs-number">2.0</span>_460.<span class="hljs-number">27.04</span>_linux.run<br>   sh cuda_11.<span class="hljs-number">2.0</span>_460.<span class="hljs-number">27.04</span>_linux.run<br>   <span class="hljs-comment">#这一步可能因为/temp容量不够会报错，百度一下错误命令里加个tempdir应该就行或者清一下temp就行（不敢乱删hh）</span><br>   <span class="hljs-comment">#e.g. sh cuda_11.0.3_450.51.06_linux.run --tmpdir=/home/cqy/tmp</span><br>   <span class="hljs-comment">#出Log file not open. Segmentation fault 删掉/tmp下的cuda-installer.log，注非root用户可能删不了这个log，只能换cuda版本</span><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><p><a href="https://sm.ms/image/6A7sRPjpeXnVEr9" target="_blank"><img src="https://s2.loli.net/2022/06/02/6A7sRPjpeXnVEr9.png" width="50%"></a></p><p>只装cuda，需要改option:<br><a href="https://sm.ms/image/1rUf2qFloj3IBba" target="_blank">&lt;img src=”https://s2.loli.net/2022/06/02/1rUf2qFloj3IBba.png” width=”50%””&gt;</a></p><p><a href="https://sm.ms/image/rJ5OVE8vuonb27R" target="_blank"><img src="https://s2.loli.net/2022/06/02/rJ5OVE8vuonb27R.png" width="50%"></a><br>之后一路选done然后install就行<br><a href="https://sm.ms/image/pZSLDNuaWMmvG7Q" target="_blank"><img src="https://s2.loli.net/2022/06/02/pZSLDNuaWMmvG7Q.png" width="50%"></a><br>安装好了</p></li><li><p>```shell<br>vim ~/.bashrc<br>#跳到最后加上，然后正常vim编辑esc :wq退出就行<br>export PATH=your_path/bin${PATH:+:${PATH}}<br>export LD_LIBRARY_PATH=your_path/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}<br>export CUDA_HOME=your_path #记得把所有的your_path换成你的安装绝对路径 例：/data0/lijiaqi/cuda11.0<br>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:your_path/lib64<br>export LD_LIBRARY_PATH=your_path/extras/CUPTI/lib64:$LD_LIBRARY_PATH<br>#这一段的参考<a href="https://blog.csdn.net/qq_40860083/article/details/124738346">https://blog.csdn.net/qq_40860083/article/details/124738346</a><br>#退出之后<br>source ~/.bashrc<br>nvcc –version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">   &lt;a href=<span class="hljs-string">&quot;https://sm.ms/image/IJ8O5R2MQ9Fagf7&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;&lt;img src=<span class="hljs-string">&quot;https://s2.loli.net/2022/06/02/IJ8O5R2MQ9Fagf7.png&quot;</span> &gt;&lt;/a&gt;<br><span class="hljs-comment">## CUDA装好了，接下来装cudnn</span><br><br>   [cuDNN Archive | NVIDIA Developer](https://developer.nvidia.com/rdp/cudnn-archive)找到跟cuda匹配的cudnn，11.x的意思为当时发布时的最新几个版本，不了解的一般别下，选择x86_64下好。<br>&lt;a href=<span class="hljs-string">&quot;https://sm.ms/image/PQImiHY4aTM6hRj&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;&lt;img src=<span class="hljs-string">&quot;https://s2.loli.net/2022/06/02/PQImiHY4aTM6hRj.png&quot;</span> &gt;&lt;/a&gt;<br><br>复制到cuda目录下如图<br>&lt;a href=<span class="hljs-string">&quot;https://sm.ms/image/c2aoFl4IRUvPz7S&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;&lt;img src=<span class="hljs-string">&quot;https://s2.loli.net/2022/06/02/c2aoFl4IRUvPz7S.png&quot;</span> width=<span class="hljs-string">&quot;20%&quot;</span>&gt;&lt;/a&gt;<br><br>```shell<br><span class="hljs-built_in">cd</span> cuda11.2<br>tar -xvf cudnn-11.2-linux-x64-v8.1.1.33.tgz <span class="hljs-comment">#解压</span><br><span class="hljs-comment">#还有几个文件需要手动移动一下</span><br><span class="hljs-built_in">cp</span> cuda/include/cudnn.h your_path/include/ <span class="hljs-comment">#这里的your_path是安装cuda的绝对路径；默认为在这个文件夹下操作</span><br><span class="hljs-built_in">cp</span> cuda/lib64/libcudnn* your_path/lib64/<br><span class="hljs-built_in">chmod</span> a+r your_path/include/cudnn.h<br><span class="hljs-built_in">chmod</span> a+r your_path/lib64/libcudnn*<br><span class="hljs-comment">#https://blog.csdn.net/qq_40860083/article/details/124738346</span><br><br><span class="hljs-comment">#检查cudnn安装</span><br><span class="hljs-built_in">cat</span> your_path/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br><span class="hljs-comment">#e.g cat /data3/lijiaqi/cuda11.2/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2 </span><br></code></pre></td></tr></table></figure><p><a href="https://sm.ms/image/rnJbC8laoMdxvg5" target="_blank"><img src="https://s2.loli.net/2022/06/02/rnJbC8laoMdxvg5.png" ></a><br>可以看出cudnn 8.1.1安装成功，撒花</p></li></ol><h1 id="Tensorflow安装与基本知识、操作"><a href="#Tensorflow安装与基本知识、操作" class="headerlink" title="Tensorflow安装与基本知识、操作"></a>Tensorflow安装与基本知识、操作</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>CPU版本dog都不用，这里说一下gpu版本安装，其实这应该是第一步，需要根据你对tf的需求去装cuda啥的</p><p><a href="https://tensorflow.google.cn/install/source?hl=zh-cn">从源代码构建  | TensorFlow (google.cn)</a><br>相关要求如上<br><a href="https://sm.ms/image/QvNt2PMkrch3oOY" target="_blank"><img src="https://s2.loli.net/2022/06/02/QvNt2PMkrch3oOY.png" ></a></p><p>接下来就可以直接pip install tensorflow-gpu==2.x.0安装了</p><ul><li><p>6月2日注：</p><p>若要求需要剪枝，tf应采用2.5.0及以上版本，e.g.<br><a href="https://sm.ms/image/5GkJwzEgPvoKH2y" target="_blank"><img src="D:/ULB/hexoblog/themes/fluid/source/img/MAI%E6%AF%94%E8%B5%9B(1)/5GkJwzEgPvoKH2y.png" ></a></p><p>否则会报一个相当诡异的多头注意力没有的错误，博主<a href="https://blog.csdn.net/QAQIknow/article/details/118210554">sinysama的博客</a>也踩过这个坑，真是相见恨晚。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>北邮计算机视觉笔记(5)</title>
    <link href="/2022/04/28/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B05/"/>
    <url>/2022/04/28/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B05/</url>
    
    <content type="html"><![CDATA[<h1 id="CH11-Segmentation-分割"><a href="#CH11-Segmentation-分割" class="headerlink" title="CH11.Segmentation(分割)"></a>CH11.Segmentation(分割)</h1><p>之前讲的都是基于像素的局部特征，分割是一种中层的图像处理和特征提取操作。<br>认知上，人眼的分割是自顶向下、自底向上同时发生的。图像处理中分割是一种自底向上无监督的图像处理方法，我们希望其能得到像素之上(“superpixels”)的特征<br><img src="https://s2.loli.net/2022/04/27/hEzNXgODQbcmYHZ.png" width=50%></p><h2 id="聚类（参数空间）"><a href="#聚类（参数空间）" class="headerlink" title="聚类（参数空间）"></a>聚类（参数空间）</h2><img src="https://s2.loli.net/2022/04/28/mQ87OViDAUvX31R.png" width=50%>单纯从特征空间考虑聚类进行分割，则会将大熊猫头和肚子上的白毛分割为一类，并不理想，所以一般会在RGB之外引入XY，像素位置也作为特征进行聚类，但这样参数也不好做，细长物体还是有可能分为两部分。k-means优缺点，优点：- 简单；对小误差鲁棒缺点：- Memory-intensive；需要指定聚类参数K- 初始敏感（优化可解决）；只能找到类似圆的聚类<h2 id="Mean-shift"><a href="#Mean-shift" class="headerlink" title="Mean shift"></a>Mean shift</h2><img src="https://s2.loli.net/2022/04/28/SNbreUHEcQA7qRX.png" width=50%>规定搜索框，每次迭代中搜索框当前中心向当前质心偏移（mean shift），直到中心与质心重合（局部极值），实际过程中，搜索大圆中包含一个人为规定大小的小圆，小圆会对在其内的点进行标记，在不断迭代中标记移动到局部极值路径上的所有点，最后，将所有通往同一处极值的点整合为一类。<img src="https://s2.loli.net/2022/04/28/61hAcGmNS3bIdsX.png" width=50%>优点：- 相比于聚类，不再受限于圆形物体；仅一个参数（搜索窗大小）；- 可以发现数量可变的区域（相对于聚类需要指定k）；鲁棒<p>缺点：</p><ul><li>结果对搜索窗大小敏感；计算密集；维度高时不适用（点稀疏）</li></ul><h2 id="图割（graph-partitioning）"><a href="#图割（graph-partitioning）" class="headerlink" title="图割（graph partitioning）"></a>图割（graph partitioning）</h2><p>这一部分与上课所讲略不同，快速过一遍。<br><img src="https://s2.loli.net/2022/04/28/P2KoMemOFz4VrjU.png" width=50%><br>想要类似图割，删除不相似两像素间的边。任务主要分两部分：1）度量相似性；2）删除边的决策策略（指标/函数）<br>度量相似性：$exp(-\frac{1}{2\sigma^2}dist(\boldsymbol{x_i},\boldsymbol{x_j})^2)$，距离可以用各种方法了，最后通过这个公式可以标准化到0~1之间<br>如果单纯看相似性做决策，取分割完后两子集$A,B$的连接边权值$w(A,B)$最小，会导致边缘点本身连接不多易被割开形成碎片。<br><img src="https://s2.loli.net/2022/04/28/2V8fXGqnUmdyPFb.png" width=50%></p><p>所以通常用这个<br><img src="https://s2.loli.net/2022/04/28/GKOJPHc7kQb2weW.png" width=50%><br>其中$w(A,V)$是指A和其他所有点形成的连接边权值和。对孤立点，该值（分母）增大，不易被切。<br>该公式算起来比较麻烦，用图论相关知识可以简化。只需要算出邻接关系矩阵$W$，值改为两点相似度。$D$是一个对角阵，每个元素是W矩阵对应行的累加和。最后：<br><img src="https://s2.loli.net/2022/04/28/L8reyDoS2jGIH3w.png" width=50%><br>多少个点y就是多少维向量，值不同就代表不同类。<br>使得表达式$y^T(D-W)y+y^TDy$最小的y值即为所求。求导得$(D-W)y=\lambda Dy$推得y是D-W矩阵第二小的特征值对应的特征向量（最小的特征值为0）。最初求解出来的y还需要通过门限得到图割方案。</p><h1 id="CH9-Classification-amp-Bag-of-word"><a href="#CH9-Classification-amp-Bag-of-word" class="headerlink" title="CH9.Classification &amp; Bag of word"></a>CH9.Classification &amp; Bag of word</h1><p>图像识别是图像层面的任务。有分类问题、检测问题（是否存在且所在位置、图像中包含哪些东西各自在哪、同时需求目标的属性语义等）、像素级别分割（语义目标包含哪些像素）…</p><p>类别识别和单实例识别。事件和行为识别。</p><p>任务有：1）如何将图像表示成向量特征，如何设计分类策略；2）给定训练数据，如何学习得到分类器；3）分类器应用于新数据</p><p>深度学习以前，分类基于区域特征。分类器分为产生式、判别式。形象地说，产生式侧重描述特征，判别式注重分类面差异。<br>从公式上说，产生式侧重先验概率（已有知识）和似然（样本得到），即下面的公式。判别式通过各种方法得到后验，直接给出结果。<br>举了挺多例子可以看一下。</p><img src="https://s2.loli.net/2022/04/28/8Q174pHwOnu3kLZ.png" width=50%><p>词袋模型是将图像转化为向量特征的方法，提供给后续如SVM等进一步操作。<br><img src="https://s2.loli.net/2022/04/28/wXY62KEdP93tMRg.png" width=50%><br>将图像划分为类拼图的区域<br><img src="https://s2.loli.net/2022/04/28/V74pyLhuakRsYZE.png" width=50%><br>纹理检测中，将图像划分后画出直方图，与词袋库直接进行比较可以判别纹理。<br><img src="https://s2.loli.net/2022/04/28/qQpeDumcSdYUA67.png" width=50%><br>将图像使用SIFT提取区域特征（规则网格法等其他方法都可以）得到各个区域的描述符。进一步构建词典，对特征聚类，指定类数（单词数），聚类中心称为码本（codebook或visual vocabulary 视觉词汇），可以称为一号特征、二号特征等等，每个中心对应的多维特征向量称为codevector或visual word。之后就可以判别图像中一号特征、二号特征、三号特征等等分别出现了多少次进行匹配即可。</p><ul><li>单词数需要指定，太多太少都不好</li><li>kmeans聚类计算密集</li><li>实际中对图片可能先进行四等分，分别做词带匹配（空间金字塔）</li></ul><h1 id="CH10-Object-Detection"><a href="#CH10-Object-Detection" class="headerlink" title="CH10.Object Detection"></a>CH10.Object Detection</h1><p>目标检测需要在给定图中找出目标位置。<br>对人脸检测而言，分为detection找出人脸，recognition确认是谁的脸。一般采用先滑窗再缩放的方法。<br>接下来用的AdaBoost，不再介绍了。</p>]]></content>
    
    
    <categories>
      
      <category>工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北邮计算机视觉笔记(4)</title>
    <link href="/2022/04/26/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B04/"/>
    <url>/2022/04/26/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B04/</url>
    
    <content type="html"><![CDATA[<h1 id="CH8-Segmentation-分割"><a href="#CH8-Segmentation-分割" class="headerlink" title="CH8.Segmentation(分割)"></a>CH8.Segmentation(分割)</h1><p>之前讲的都是基于像素的局部特征，分割是一种中层的图像处理和特征提取操作。<br>认知上，人眼的分割是自顶向下、自底向上同时发生的。图像处理中分割是一种自底向上无监督的图像处理方法，我们希望其能得到像素之上(“superpixels”)的特征<br><img src="https://s2.loli.net/2022/04/27/hEzNXgODQbcmYHZ.png" width=50%></p><h2 id="聚类（参数空间）"><a href="#聚类（参数空间）" class="headerlink" title="聚类（参数空间）"></a>聚类（参数空间）</h2><img src="https://s2.loli.net/2022/04/28/mQ87OViDAUvX31R.png" width=50%>单纯从特征空间考虑聚类进行分割，则会将大熊猫头和肚子上的白毛分割为一类，并不理想，所以一般会在RGB之外引入XY，像素位置也作为特征进行聚类，但这样参数也不好做，细长物体还是有可能分为两部分。k-means优缺点，优点：- 简单；对小误差鲁棒缺点：- Memory-intensive；需要指定聚类参数K- 初始敏感（优化可解决）；只能找到类似圆的聚类<h2 id="Mean-shift"><a href="#Mean-shift" class="headerlink" title="Mean shift"></a>Mean shift</h2><img src="https://s2.loli.net/2022/04/28/SNbreUHEcQA7qRX.png" width=50%>规定搜索框，每次迭代中搜索框当前中心向当前质心偏移（mean shift），直到中心与质心重合（局部极值），实际过程中，搜索大圆中包含一个人为规定大小的小圆，小圆会对在其内的点进行标记，在不断迭代中标记移动到局部极值路径上的所有点，最后，将所有通往同一处极值的点整合为一类。<img src="https://s2.loli.net/2022/04/28/61hAcGmNS3bIdsX.png" width=50%>优点：- 相比于聚类，不再受限于圆形物体；仅一个参数（搜索窗大小）；- 可以发现数量可变的区域（相对于聚类需要指定k）；鲁棒<p>缺点：</p><ul><li>结果对搜索窗大小敏感；计算密集；维度高时不适用（点稀疏）</li></ul><h2 id="图割（graph-partitioning）"><a href="#图割（graph-partitioning）" class="headerlink" title="图割（graph partitioning）"></a>图割（graph partitioning）</h2><p>这一部分与上课所讲略不同，快速过一遍。<br><img src="https://s2.loli.net/2022/04/28/P2KoMemOFz4VrjU.png" width=50%><br>想要类似图割，删除不相似两像素间的边。任务主要分两部分：1）度量相似性；2）删除边的决策策略（指标/函数）<br>度量相似性：$exp(-\frac{1}{2\sigma^2}dist(\boldsymbol{x_i},\boldsymbol{x_j})^2)$，距离可以用各种方法了，最后通过这个公式可以标准化到0~1之间<br>如果单纯看相似性做决策，取分割完后两子集$A,B$的连接边权值$w(A,B)$最小，会导致边缘点本身连接不多易被割开形成碎片。<br><img src="https://s2.loli.net/2022/04/28/2V8fXGqnUmdyPFb.png" width=50%></p><p>所以通常用这个<br><img src="https://s2.loli.net/2022/04/28/GKOJPHc7kQb2weW.png" width=50%><br>其中$w(A,V)$是指A和其他所有点形成的连接边权值和。对孤立点，该值（分母）增大，不易被切。<br>该公式算起来比较麻烦，用图论相关知识可以简化。只需要算出邻接关系矩阵$W$，值改为两点相似度。$D$是一个对角阵，每个元素是W矩阵对应行的累加和。最后：<br><img src="https://s2.loli.net/2022/04/28/L8reyDoS2jGIH3w.png" width=50%><br>多少个点y就是多少维向量，值不同就代表不同类。<br>使得表达式$y^T(D-W)y+y^TDy$最小的y值即为所求。求导得$(D-W)y=\lambda Dy$推得y是D-W矩阵第二小的特征值对应的特征向量（最小的特征值为0）。最初求解出来的y还需要通过门限得到图割方案。</p><h1 id="CH9-Classification-amp-Bag-of-word"><a href="#CH9-Classification-amp-Bag-of-word" class="headerlink" title="CH9.Classification &amp; Bag of word"></a>CH9.Classification &amp; Bag of word</h1><p>图像识别是图像层面的任务。有分类问题、检测问题（是否存在且所在位置、图像中包含哪些东西各自在哪、同时需求目标的属性语义等）、像素级别分割（语义目标包含哪些像素）…</p><p>类别识别和单实例识别。事件和行为识别。</p><p>任务有：1）如何将图像表示成向量特征，如何设计分类策略；2）给定训练数据，如何学习得到分类器；3）分类器应用于新数据</p><p>深度学习以前，分类基于区域特征。分类器分为产生式、判别式。形象地说，产生式侧重描述特征，判别式注重分类面差异。<br>从公式上说，产生式侧重先验概率（已有知识）和似然（样本得到），即下面的公式。判别式通过各种方法得到后验，直接给出结果。<br>举了挺多例子可以看一下。</p><img src="https://s2.loli.net/2022/04/28/8Q174pHwOnu3kLZ.png" width=50%><p>词袋模型是将图像转化为向量特征的方法，提供给后续如SVM等进一步操作。<br><img src="https://s2.loli.net/2022/04/28/wXY62KEdP93tMRg.png" width=50%><br>将图像划分为类拼图的区域<br><img src="https://s2.loli.net/2022/04/28/V74pyLhuakRsYZE.png" width=50%><br>纹理检测中，将图像划分后画出直方图，与词袋库直接进行比较可以判别纹理。<br><img src="https://s2.loli.net/2022/04/28/qQpeDumcSdYUA67.png" width=50%><br>将图像使用SIFT提取区域特征（规则网格法等其他方法都可以）得到各个区域的描述符。进一步构建词典，对特征聚类，指定类数（单词数），聚类中心称为码本（codebook或visual vocabulary 视觉词汇），可以称为一号特征、二号特征等等，每个中心对应的多维特征向量称为codevector或visual word。之后就可以判别图像中一号特征、二号特征、三号特征等等分别出现了多少次进行匹配即可。</p><ul><li>单词数需要指定，太多太少都不好</li><li>kmeans聚类计算密集</li><li>实际中对图片可能先进行四等分，分别做词带匹配（空间金字塔）</li></ul><h1 id="CH10-Object-Detection"><a href="#CH10-Object-Detection" class="headerlink" title="CH10.Object Detection"></a>CH10.Object Detection</h1><p>目标检测需要在给定图中找出目标位置。<br>对人脸检测而言，分为detection找出人脸，recognition确认是谁的脸。一般采用先滑窗再缩放的方法。<br>接下来用的AdaBoost，不再介绍了。</p>]]></content>
    
    
    <categories>
      
      <category>工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北邮计算机视觉笔记(3)</title>
    <link href="/2022/04/26/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B03/"/>
    <url>/2022/04/26/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="CH6-Blob-detection"><a href="#CH6-Blob-detection" class="headerlink" title="CH6.Blob detection"></a>CH6.Blob detection</h1><p>Harris角点不具有尺度不变性，故提出一个具有尺度不变性的特征Blob detection，以此为基础的SIFT也应用广泛<br>理想状态如图，两圆中内容一致，具有尺度不变性。下面的是理想的检测器响应函数。</p><img src="https://s2.loli.net/2022/04/25/CqdmArVYpUawxSl.png" width=70%><h2 id="拉普拉斯核"><a href="#拉普拉斯核" class="headerlink" title="拉普拉斯核"></a>拉普拉斯核</h2><p><strong>边缘检测中我们使用高斯一阶导判定极值</strong><br><img src="https://s2.loli.net/2022/04/25/ycszF5Wur9RiYJM.png" width=50%><br><strong>引入高斯二阶导(拉普拉斯核Laplacian)，判定过0点也可以</strong><br><img src="https://s2.loli.net/2022/04/25/ntjUr4DZ5PgI1Cy.png" width=50%></p><p>与高斯核类似，拉普拉斯核也只有一个参数$\sigma$，且从下图中可以观察到，当$\sigma$与尺度一致时，会有最值响应，<br>这称为<strong>尺度选择特性</strong></p><img src="https://s2.loli.net/2022/04/25/4h7BoSXcZrOMCVv.png" width=80%><ul><li>Spatial selection: the magnitude of the Laplacian response will achieve a maximum at the center of the blob, provided the scale of the Laplacian is “matched” to the scale of the blob</li></ul><p>所以我们的思路是扔一堆不同$\sigma$的拉普拉斯核上去卷，取最大响应的对应就可以了</p><p>随着$\sigma$增大，响应信号会衰减，以至于无法看出最值，所以还需要进行补偿，高斯偏导补偿（响应乘上）$\sigma$，拉普拉斯核补偿$\sigma^2$</p><p>实际中图像$r与\sigma$的对应关系如图<br><img src="https://s2.loli.net/2022/04/25/z6mUcaT8kILCZ3E.png" width=100%></p><p>实际中，对一个点做不同$\sigma$的卷积，观察响应结果，看某个$\sigma$及其较大较小值，决定是否保留这个$\sigma$；<br>同时类似于非最大化抑制，该点还要与相邻像素比较响应最大值再输出</p><p>常用手段是    1）Harris+Laplace 减少待检测像素数量     2）SIFT</p><h2 id="SIFT"><a href="#SIFT" class="headerlink" title="SIFT"></a>SIFT</h2><img src="https://s2.loli.net/2022/04/25/4s2dcIWjGmBJUgP.png" >主要是拉普拉斯核太慢了，DOG（高斯差分）模板提供的公式可以将拉普拉斯核化成两个高斯核之差，而高斯核的特性使得我们不用直接算$k\sigma$的大核，用$\sigma$和$\sqrt{(k\sigma)^2-\sigma^2}$即可<h3 id="构建高斯金字塔"><a href="#构建高斯金字塔" class="headerlink" title="构建高斯金字塔"></a>构建高斯金字塔</h3><img src="https://s2.loli.net/2022/04/25/Yn1zexOqFmT4trg.png" width=50%>先分组(组数o)再分层(**组内可供极值点检测的DOG层数s**)，由于极值点检测需要上下DOG层的存在，所以DOG是s+2层，DOG由高斯差分得到，所以高斯是s+3层，层间按照上述高斯特性计算，这是数量关系<p>$系数k=2^{\frac{1}{s}}$，主要考虑到如下图所示，<strong>s=2</strong>，带入可以得到DOG层第一组$\sigma$系数为$1,2^{1/2},2,2^{3/2}$，第二组系数则从2开始，有连续关系。同时，对原图做$2\sigma$高斯相当于降采样到一半做$\sigma$高斯，也即对于不同的组，我的高斯卷积核组不变，改变图像尺寸反复用这个高斯核组就能得到左边的各个高斯层的组。有时，高斯部分（左半边）第二组的$2\sigma$层（第一层）也由第一组的倒数第三层$k^2\sigma=2\sigma$直接降采样得到，这是一个普遍规律。参考<a href="https://zhuanlan.zhihu.com/p/343522892">知乎</a>，<a href="https://blog.csdn.net/zddblog/article/details/7521424">zddhub的博客</a>。</p><img src="https://s2.loli.net/2022/04/25/ZL8SPxWhCamc5zV.png" ><h3 id="sift后续操作"><a href="#sift后续操作" class="headerlink" title="sift后续操作"></a>sift后续操作</h3><h4 id="解决视角带来的问题"><a href="#解决视角带来的问题" class="headerlink" title="解决视角带来的问题"></a>解决视角带来的问题</h4><img src="https://s2.loli.net/2022/04/25/dGIbQqPyMAf1Lzk.png" width=50%>右图视角发生变化，如果用一个纯粹的圆，圆内状态很明显是不一样的，改用一个恰当的椭圆就可以解决该问题。具体方法如下，对区域内所有点计算Harris的M矩阵，得区域内信号对应的椭圆，保留变换快的方向，收缩变化慢的方向，不停迭代，得到所求椭圆。<img src="https://s2.loli.net/2022/04/25/JgMBAbxpnEUNeRV.png" width=50%><h4 id="圆内图像的角度问题"><a href="#圆内图像的角度问题" class="headerlink" title="圆内图像的角度问题"></a>圆内图像的角度问题</h4><img src="https://s2.loli.net/2022/04/25/qKGWnRtQ98TYD6V.png" width=50%>需要一个旋转，采用基于梯度方向的方法。对区域内每个像素的梯度方向做直方图，找到最大柱子对应角度，例如每45°一等分，一共8根直方图，最高的对应90°，则对应图像旋转90°类似归零，两图都这么做就近似对准了。<h4 id="光照和局部细节问题"><a href="#光照和局部细节问题" class="headerlink" title="光照和局部细节问题"></a>光照和局部细节问题</h4><img src="https://s2.loli.net/2022/04/25/2pgtSeQ9TA6MBoF.png" width=60%>如图采用**SIFT描述符**，把一个圆等分4×4=16份，对每一份求一个梯度直方图描述细节的相对关系（解决光照），还是45°一分，所以一个区域内用如图所示8指针代表一个区域，最后全部拉直得到一个区域数16×直方图8=128的描述符，对比描述符即可。<p>SIFT的Invariance &amp; covariance<br><img src="https://s2.loli.net/2022/04/25/T2bXv3G6E8AmYFN.png" width=70%></p><h1 id="CH7-Texture-纹理"><a href="#CH7-Texture-纹理" class="headerlink" title="CH7.Texture(纹理)"></a>CH7.Texture(纹理)</h1><p><strong>Importance to perception:</strong></p><ul><li>Often indicative of a material’s properties</li><li>Can be important appearance cue, especially if shape is similar across objects</li><li>Aim to distinguish between shape, boundaries, and texture</li></ul><p><strong>Technically:</strong></p><ul><li>Representation-wise, we want a feature one step above “building blocks” of filters, edges.</li></ul><p>纹理也是一种局部特征（pattern），所以任务就是发现和描述</p><img src="https://s2.loli.net/2022/04/26/Slt2ebg4UYMJF9i.png" width=50%><p>对各个滑窗运用x方向和y方向高斯偏导核，用均值标识纹理特征，在特征空间聚类，就完成了纹理的发现和分类（聚类时考虑类间类内那一套）。</p><img src="https://s2.loli.net/2022/04/26/w92b3LRoGjmxPJS.png" width=50%><p>也不一定要用偏导核，任何滤波器也行，尺寸是通过不断尝试缩放直到特征指标稳定得到的。实际中用d个滤波器得到d维描述符。</p><img src="https://s2.loli.net/2022/04/26/3ONWhiD6Ucpdyeg.png" width=50%><p>上课和PPT也讲了协方差和多维高斯的数学描述，可以看一下。<br>就这些</p>]]></content>
    
    
    <categories>
      
      <category>工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北邮计算机视觉笔记(2)</title>
    <link href="/2022/04/23/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B02/"/>
    <url>/2022/04/23/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="CH4-fitting-least-squares-amp-RANSAC"><a href="#CH4-fitting-least-squares-amp-RANSAC" class="headerlink" title="CH4.fitting(least squares &amp; RANSAC)"></a>CH4.fitting(least squares &amp; RANSAC)</h1><ul><li>边缘等特征提取之后需要进行参数描述</li><li>需要解决的问题：Noise，Extraneous data（外点），Missing data（eg遮挡）</li><li>手段-目的Q&amp;A<img src="https://s2.loli.net/2022/04/17/fQwWxS7TniRZ3ag.png" width=50%></li></ul><h2 id="最小二乘least-squares"><a href="#最小二乘least-squares" class="headerlink" title="最小二乘least squares"></a>最小二乘least squares</h2><ul><li><strong>学过，直接莽上去试着推一边发现遗漏了许多细节，看来以后基础的东西还是得多复习</strong><h3 id="基础推导"><a href="#基础推导" class="headerlink" title="基础推导"></a>基础推导</h3><img src="https://s2.loli.net/2022/04/17/raFkHP24LXQSAcU.png" width=80%>注意矩阵求导的方法，不记得了可以看[这个](https://blog.csdn.net/lirika_777/article/details/79646453)上述方法对竖直线不能拟合，即不具有旋转不变性，改用以下方法。### 改用与点线之间距离（权最小二乘）<img src="https://s2.loli.net/2022/04/17/xYF5wUk7ySbW1P2.png" >svd分解，特征值特征向量那一套，参考[csdn](https://blog.csdn.net/qq_42700518/article/details/104614700)和[百度文库ppt](https://wenku.baidu.com/view/ca9145fd960590c69ec376f8.html)### 从极大似然估计角度来看<img src="https://s2.loli.net/2022/04/17/SmUw4O51elptcNd.png" ><img src="https://s2.loli.net/2022/04/17/D781wO5UNyclWGB.png" ></li></ul><p><strong>思想不一样，实际结果是一样的</strong></p><h3 id="Robust-estimators-fitting"><a href="#Robust-estimators-fitting" class="headerlink" title="Robust estimators(fitting)"></a>Robust estimators(fitting)</h3><img src="https://s2.loli.net/2022/04/17/TWzSJoHrQ6lPiO4.png" >简单来说就是改变求和中单纯的平方，调整参数使得拟合时对离谱的外点摆烂<h2 id="RANSAC-Random-sample-consensus-适用外点很多"><a href="#RANSAC-Random-sample-consensus-适用外点很多" class="headerlink" title="RANSAC(Random sample consensus)(适用外点很多)"></a>RANSAC(Random sample consensus)(适用外点很多)</h2><p>步骤：</p><ul><li>选择估计所用的最小集合（例如估计一条直线需要取两个点）</li><li>用所取子集进行拟合</li><li>剩余的点按照误差对拟合结果投票</li><li>重复以上三步，设置迭代停止条件</li></ul><img src="../../themes/fluid/source/img/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B02/9BJhcKnaok8Wyif.png" width=50%><p>需要设置距离类型选择、投票阈值、迭代停止次数</p><p>概率公式：<img src="https://s2.loli.net/2022/04/24/xw6bRSDHnqW5pdf.png" width=80%></p><p>其中e是外点率，即真实情况下，取到的点不在理想拟合直线附近的概率，s是第一步中的取点个数，$1-(1-e)^s$即为某一次迭代中，初始化取点取到外点以至于拟合直线不理想的概率，$(1-(1-e)^s)^N$即为整个拟合过程N次迭代都取到外点的概率，p为最终输出直线取到理想直线的置信度。</p><ul><li><p>优点：简单；缺点：参数多</p></li><li><p>软分类（改进）：取最后投票给该直线的所有点做最小二乘（refine）得到最终输出直线</p></li></ul><h3 id="RANSAC其他用途"><a href="#RANSAC其他用途" class="headerlink" title="RANSAC其他用途"></a>RANSAC其他用途</h3><img src="https://s2.loli.net/2022/04/24/5EJnTyWIpmhzxPj.png" width=70%><p>用RANSAC拟合上图所示仿射变换，最小集合即取左右三对点可以拟合（6个方程6个未知数），之后同上</p><h2 id="The-Hough-transform（霍夫变换）"><a href="#The-Hough-transform（霍夫变换）" class="headerlink" title="The Hough transform（霍夫变换）"></a>The Hough transform（霍夫变换）</h2><p>思想：</p><ul><li>每个特征（像素）给所有有关的拟合结果投票</li><li>需要关注噪声投票的结果，不能使其极大输出</li><li>缺失部分数据不影响结果</li></ul><p>首先进行图片空间到参数空间的映射，线到点，点到线（hough即在参数空间离散投票）<br><img src="https://s2.loli.net/2022/04/24/9tnyj2mzZq6WJua.png" width=50%><br><img src="https://s2.loli.net/2022/04/24/ua4SlWfBiv5gyx8.png" width=50%><br>一个简单的例子，参数空间会把交点投出来，交点即对应图像空间拟合直线<br><img src="https://s2.loli.net/2022/04/24/yRs3avmW6U7z4xt.png" width=60%><br><img src="https://s2.loli.net/2022/04/24/HopaNxXj6lUeEZt.png"  width=70%></p><p>无法表达与y轴平行的线，所以参数空间一般采用极坐标系<br><img src="https://s2.loli.net/2022/04/24/JGrMfgmP36HQuTq.png" width=50% ><br><img src="https://s2.loli.net/2022/04/24/A8Si4L97RbzeZcx.png" width=40%><br>注意 $(\rho , \theta)$参数坐标系无法表示圆<br><img src="https://s2.loli.net/2022/04/24/RAiZ9TFBbEN6dQl.png" width=50%></p><p>噪声比例会使得真正的拟合线更难被投出来，进一步，还可能由噪声形成伪线。可以在参数空间使用离散化网格了来增强噪声鲁棒性，像素特征对网格进行投票；更改投票策略，投票时距离近的格子得分高，距离远的得分低（eg高斯）<br>另外，可以降低转换时的外点率，可以先利用canny算子提取边缘剔除外点，对于边缘中的每个像素点，可以求得他的梯度方向，进一步取得他的“切线”，让该点只对切线对应参数空间格子投票</p><h3 id="hough-变换处理圆和其他"><a href="#hough-变换处理圆和其他" class="headerlink" title="hough 变换处理圆和其他"></a>hough 变换处理圆和其他</h3><img src="https://s2.loli.net/2022/04/24/8uiQOAeEKt4UohY.png" width=60%>对边缘上一点的梯度方向设定半径r取得圆心，r和圆心关系的参数空间满足右图，即该点对右图的红线投票<h1 id="CH5-Corners-Harris角点"><a href="#CH5-Corners-Harris角点" class="headerlink" title="CH5.Corners(Harris角点)"></a>CH5.Corners(Harris角点)</h1><p>角点是一种局部特征，在配准，对齐等领域中引入，已配准为例，我们希望角点有如下特征</p><ul><li>可重复检出，两张图图像条件不一致，在一种图中检出的角点希望在另一张图对应位置也能检出</li><li>检出角点具有显著性，能与其他角点区分</li><li>计算快</li><li>仅与局部区域有关</li></ul><p>角点检测最基本思路就是区域的方向移动（滑窗）会使得区域内的情况发生改变，如下图右侧所示<br><img src="https://s2.loli.net/2022/04/24/wuoVNDeprj5OMP4.png" width=50%><br>数学公式可以表示为<br><img src="https://s2.loli.net/2022/04/24/AzGqnYgyBmV18Wt.png" width=50%><br>$u,v,x,y$为输入，xy为当前滑窗中心坐标，uv为滑窗方向向量，$E(u,v)$为移动前后变化，w为窗内所赋的权值（可以用01门函数、高斯函数等等）。<br>角点需要得知移动前后变化大小，所以求一阶导（泰勒展开，矩阵论）<br><img src="https://s2.loli.net/2022/04/24/gaevLWmfVBdu4HZ.png" width=70%><br><img src="https://s2.loli.net/2022/04/24/Ta4vEw5el9pAKiO.png" width=50%><br><img src="https://s2.loli.net/2022/04/24/xz3LWkohPaCRSZb.png" width=50%><br><img src="https://s2.loli.net/2022/04/24/geXcU51yRQ7tzLf.png" width=60%><br>接下来讨论$M$矩阵即可<br>当是一个垂直或水平的边缘时，$I_x或I_y$其中一个为0，$M$矩阵一个特征值必然为（接近）0，不是角点<br>即我的M矩阵需要满秩，且两个特征值都离0较远<br>在通常情况下，M矩阵四个值都不为0，此时需要分解（相似对角化）<br><img src="https://s2.loli.net/2022/04/24/hgKX6WMdO2QVtN3.png" width=70%><br>$R$即为旋转矩阵，$\lambda$越大，代表该方向变化越快，可以以一个椭圆表示出来，$R$即让这个一般椭圆旋转为正椭圆，$\lambda$对应变化方向还需要结合R对应的偏转来看<br>分类图：<img src="https://s2.loli.net/2022/04/24/xXN547abgsy2lIr.png" width=50%><br>可以统一于指标R：<img src="https://s2.loli.net/2022/04/24/qFInsLBJkgdSCW2.png" width=50%></p><ul><li>角点检测后，由于滑窗大小等因素，其实是一团一团的，与canny一样，需要非极大化抑制得到输出</li></ul><h2 id="特征工程中的不变性（Invariance-covariance-Scaling）"><a href="#特征工程中的不变性（Invariance-covariance-Scaling）" class="headerlink" title="特征工程中的不变性（Invariance covariance Scaling）"></a>特征工程中的不变性（Invariance covariance Scaling）</h2><ul><li><p><strong>Invariance</strong>: image is transformed and corner locations do not change</p><p>即$F(img)=F(T(img))$，相同图像经过一定变换$T$（曝光，对比度，角度等），经过相同的检测器$F$能提取出相同的特征</p></li><li><p><strong>Covariance</strong>: if we have two transformed versions of the same image, features should be detected in corresponding locations</p><p>一般很难做到Invariance，Covariance即$F(T(img))=T’(F(img))$，图像变换前后的特征能通过变换$T’$形成一致</p></li></ul><p>角点可以做到部分的Invariance不变性，例如所有像素经过一个$ax+b$的线性变换，部分角点仍能保持在门限上，但可能部分点变换后超过门限。平移旋转前后也可以做到Covariance。但如下图所示，<strong>不具有尺度不变性</strong></p><img src="https://s2.loli.net/2022/04/25/sHaeOWMiBkmCpEN.png" width=70%>]]></content>
    
    
    <categories>
      
      <category>工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北邮计算机视觉笔记(1)</title>
    <link href="/2022/04/16/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B01/"/>
    <url>/2022/04/16/%E5%8C%97%E9%82%AE%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="课程资源地址"><a href="#课程资源地址" class="headerlink" title="课程资源地址"></a>课程资源地址</h1><h3 id="计算机视觉入门课程"><a href="#计算机视觉入门课程" class="headerlink" title="计算机视觉入门课程"></a>计算机视觉入门课程</h3><ul><li>课程链接：<a href="https://www.bilibili.com/video/BV1nz4y197Qv">[BiliBili]</a></li><li>课件链接：<a href="https://github.com/CV-xueba/A01_cvclass_basic/tree/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%9F%BA%E7%A1%80_%E8%AF%BE%E4%BB%B6">[Github]</a> <a href="https://gitee.com/cv-xueba/A01_cvclass_basic/tree/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%9F%BA%E7%A1%80_%E8%AF%BE%E4%BB%B6">[Gitee]</a> <a href="https://wws.lanzous.com/b01nn85ef">[蓝奏云]</a></li><li>课后练习链接：<a href="https://github.com/CV-xueba/A01_cvclass_basic_exercise">[Github]</a> <a href="https://gitee.com/cv-xueba/A01_cvclass_basic_exercise">[Gitee]</a></li></ul><h3 id="计算机视觉与深度学习"><a href="#计算机视觉与深度学习" class="headerlink" title="计算机视觉与深度学习"></a>计算机视觉与深度学习</h3><ul><li>课程链接：<a href="https://www.bilibili.com/video/BV1V54y1B7K3">[BiliBili]</a></li><li>课件链接：<a href="https://github.com/CV-xueba/A02_cvclass_cv-dl/tree/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_%E8%AF%BE%E4%BB%B6">[Github]</a> <a href="https://gitee.com/cv-xueba/A02_cvclass_cv-dl/tree/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_%E8%AF%BE%E4%BB%B6">[Gitee]</a> <a href="https://wws.lanzous.com/b01nn857i">[蓝奏云]</a></li></ul><h1 id="CH2-filter"><a href="#CH2-filter" class="headerlink" title="CH2.filter"></a>CH2.filter</h1><h2 id="普通卷积"><a href="#普通卷积" class="headerlink" title="普通卷积"></a>普通卷积</h2><ul><li>卷积常用三种形态 full,same,valid<img src="https://s2.loli.net/2022/04/16/nVHiTwkEvC92Fet.png" alt="image.png" width=50%></li></ul><p>$$ \begin{bmatrix}  0&amp;0&amp;0 \  0&amp;1&amp;0 \  0&amp;0&amp;0 \  \end{bmatrix} $$(e)卷积得到原图（padding=1）$$1/9* \begin{bmatrix}  1&amp;1&amp;1\  1&amp;1&amp;1\  1&amp;1&amp;1\  \end{bmatrix}$$ （s）简单平滑，二者相减如图</p><center class="half"><img src="https://s2.loli.net/2022/04/16/zX6nlxpgmRTHaqG.png" width=47% align='left'><img src="https://s2.loli.net/2022/04/16/8kABmZRQl6EMwzr.png" width = 47% align='right'></center><p>即(e-s)可简单提取边缘，进一步(2e-s)卷积简单锐化效果</p><h2 id="高斯卷积"><a href="#高斯卷积" class="headerlink" title="高斯卷积"></a>高斯卷积</h2><ul><li>以上普通卷积易造成多出来的水平或竖直纹理，使用高斯卷积可以避免，标准差$\sigma$控制集中程度，一般设置卷积核size为$3\sigma$</li><li><img src="https://s2.loli.net/2022/04/16/s36zefRQ5FA791I.png" width=50% height=50%></li><li>高斯卷积运算可以叠加，相同σ卷积两次等同于$ \sqrt{2}\sigma $卷积1次</li><li>一个简单的类似可分离卷积的例子，可以将复杂度从$O(n^2m^2)$降到$O(2n^2m)=O(n^2m)$(n是图片大小，m是卷积核长/宽)</li></ul><h2 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h2><ul><li>椒盐噪声（黑&amp;白）、脉冲噪声（白）、高斯噪声（每点叠加正态分布）<img src="https://s2.loli.net/2022/04/17/DZGoxQzKPqmIU2N.png" alt="image.png" width=50%></li><li>中值滤波核（median filter）和均值滤波核（mean filter），中位数-平均数</li><li>高斯噪声-高斯滤波（需要调整$\sigma$）椒盐噪声-中值滤波</li></ul><h1 id="CH3-Edge-detection"><a href="#CH3-Edge-detection" class="headerlink" title="CH3.Edge detection"></a>CH3.Edge detection</h1><ul><li>基本原理：导数求极值</li></ul><h2 id="求导算子"><a href="#求导算子" class="headerlink" title="求导算子"></a>求导算子</h2><p>eg.一个$ \begin{bmatrix}  1&amp;-1 \end{bmatrix} $的卷积核可以提取出竖直的轮廓（这可以看作是一个x方向求导算子，事实上，求导本身就可以看作是一种卷积，求导卷积和为0，平滑卷积和一般为1），$$ \begin{bmatrix}  1\-1 \end{bmatrix} $$可以提取水平向的轮廓<img src="https://s2.loli.net/2022/04/17/BLxUFmJuHWZCq5k.png" width=50% ></p><p>各种定义方式：<img src="https://s2.loli.net/2022/04/17/Oh5nm9p2IF1eZCY.png"  width=50%></p><p>边缘强度<em>edge strength</em>：$\Vert \nabla f \Vert=\sqrt{ (\frac{\partial f}{\partial x})^2+\frac{\partial f}{\partial y})^2 }$ </p><p>由于噪声情况存在，一边先对图片做平滑（卷积）操作，上面提到，求导也是一种卷积，故可以使用结合律先将平滑算子与求导算子结合再做卷积，可以降低计算复杂度<img src="https://s2.loli.net/2022/04/17/p2UmWOiT89QKSLY.png" width=60%></p><p>显然，采用高斯核的平滑卷积越大，图像越平滑，但边缘越模糊</p><h2 id="Canny"><a href="#Canny" class="headerlink" title="Canny"></a>Canny</h2><ul><li>理想是找到超像素的的真正边缘</li></ul><p>一般图像平滑后利用边缘强度提取出边缘，进而阈值二值化后的边缘有的很粗，并不是真正的边缘，canny先使用非极大值抑制<em>Non-Maximum Suppression</em>，在梯度方向找寻极值，也需要插值得到加权之后的真正边缘点，细节可查资料。抑制后得到边缘单像素，但部分细节边缘可能会丢失，这来自于二值化的门限。</p><p>进一步采用双门限法，先用高门限提取明显边缘，在利用低门限补充细节，我们认为前者与后者之间存在连接，于是补全缺失部分，同时将并不能与前者近似连接的细节去除。<img src="https://s2.loli.net/2022/04/17/3CWAnYHRKxzSjtZ.png"  width=60%></p>]]></content>
    
    
    <categories>
      
      <category>工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读文献工作流</title>
    <link href="/2022/04/10/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <url>/2022/04/10/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1-arxiv等平台下载文献至桌面mypaperlib文件夹"><a href="#1-arxiv等平台下载文献至桌面mypaperlib文件夹" class="headerlink" title="1 arxiv等平台下载文献至桌面mypaperlib文件夹"></a>1 arxiv等平台下载文献至桌面mypaperlib文件夹</h1><h2 id="文件架格式名如图-年份-（简写）-全名"><a href="#文件架格式名如图-年份-（简写）-全名" class="headerlink" title="文件架格式名如图 年份+（简写）+全名"></a>文件架格式名如图 年份+（简写）+全名</h2><p><img src="/img/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/Untitled.png"></p><h1 id="2-该文件架会自动同步至坚果云和onedrive"><a href="#2-该文件架会自动同步至坚果云和onedrive" class="headerlink" title="2 该文件架会自动同步至坚果云和onedrive"></a>2 该文件架会自动同步至坚果云和onedrive</h1><h2 id="坚果云是右键即可设置同步；OneDrive需要创建软链接，都挺简单的"><a href="#坚果云是右键即可设置同步；OneDrive需要创建软链接，都挺简单的" class="headerlink" title="坚果云是右键即可设置同步；OneDrive需要创建软链接，都挺简单的"></a>坚果云是右键即可设置同步；OneDrive需要创建软链接，都挺简单的</h2><p><img src="/img/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/T70T6SMJEK07C4MER6-16500999435651.png"></p><p>（第二个就是了）</p><p><img src="/img/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/Untitled%201.png" alt="坚果云"></p><p><img src="/img/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/Untitled%202.png" alt="onedrive"></p><h1 id="3-直接在电脑端读-在ipad端读和做笔记"><a href="#3-直接在电脑端读-在ipad端读和做笔记" class="headerlink" title="3 直接在电脑端读/在ipad端读和做笔记"></a>3 直接在电脑端读/在ipad端读和做笔记</h1><h2 id="电脑端就无所谓啥了，drawboard-foxit都行"><a href="#电脑端就无所谓啥了，drawboard-foxit都行" class="headerlink" title="电脑端就无所谓啥了，drawboard foxit都行"></a>电脑端就无所谓啥了，drawboard foxit都行</h2><h2 id="ipad端试了挺多，推荐的是直接用onedrive打开做笔记和用福昕阅读器连接坚果云做笔记；当然goodnotes也能用，备份连接onedrive（需梯子）即可"><a href="#ipad端试了挺多，推荐的是直接用onedrive打开做笔记和用福昕阅读器连接坚果云做笔记；当然goodnotes也能用，备份连接onedrive（需梯子）即可" class="headerlink" title="ipad端试了挺多，推荐的是直接用onedrive打开做笔记和用福昕阅读器连接坚果云做笔记；当然goodnotes也能用，备份连接onedrive（需梯子）即可"></a>ipad端试了挺多，推荐的是直接用onedrive打开做笔记和用福昕阅读器连接坚果云做笔记；当然goodnotes也能用，备份连接onedrive（需梯子）即可</h2><p><img src="/img/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/Untitled%203.png" alt="效果"></p><h1 id="4-读文献的顺序plan"><a href="#4-读文献的顺序plan" class="headerlink" title="4 读文献的顺序plan"></a>4 读文献的顺序plan</h1><h2 id="参考notion的MyPaperLib，里面是规划和各种资源"><a href="#参考notion的MyPaperLib，里面是规划和各种资源" class="headerlink" title="参考notion的MyPaperLib，里面是规划和各种资源"></a>参考notion的MyPaperLib，里面是规划和各种资源</h2><p><img src="/img/%E8%AF%BB%E6%96%87%E7%8C%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20220416170737426.png" alt="MyPaperLib"></p><h2 id="一些没用的东西"><a href="#一些没用的东西" class="headerlink" title="一些没用的东西"></a>一些没用的东西</h2><ul><li>该文档还和gitee的仓库做了连接，可以作为公链放在notion里，没事的时候也可以上传gitee备份（属实是无聊）</li><li>文献没读几篇就折腾了好几遍，属实是差生文具多</li></ul>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019Fastdepth复现tensorflow版</title>
    <link href="/2022/04/07/2019FastDepth%E5%A4%8D%E7%8E%B0(tensorflow)/"/>
    <url>/2022/04/07/2019FastDepth%E5%A4%8D%E7%8E%B0(tensorflow)/</url>
    
    <content type="html"><![CDATA[<h1 id="论文笔记"><a href="#论文笔记" class="headerlink" title="论文笔记"></a>论文笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>基于深度学习的单目深度估计在近几年是比较热门的研究方向之一，MIT的Diana Wofk等人在ICRA 2019上提出了一种用于嵌入式系统的深度估计算法FastDepth，在保证准确率的情况下，<strong>大大提高了模型的计算效率（</strong><a href="https://www.jianshu.com/p/2832e42f637f">来源</a><strong>）</strong>。 </p><p>论文地址：<a href="https://arxiv.org/abs/1903.03273v1">[1903.03273v1] FastDepth: Fast Monocular Depth Estimation on Embedded Systems (arxiv.org)</a></p><p>官方验证测试的pytorch版本（无训练）：<a href="https://links.jianshu.com/go?to=https://github.com/dwofk/fast-depth">https://github.com/dwofk/fast-depth</a></p><h2 id="笔记（这个部分以后需要边看边写）"><a href="#笔记（这个部分以后需要边看边写）" class="headerlink" title="笔记（这个部分以后需要边看边写）"></a>笔记（这个部分以后需要边看边写）</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>深度感应是机器人任务的一个关键功能，如定位、测绘和障碍物检测等任务的关键功能。<br>人们对从单一的RGB图像中进行深度估计的兴趣日益浓厚。由于单眼相机的成本和尺寸相对较低，人们对从单一的RGB图像进行深度估计的兴趣越来越大。然而，最先进的单目深度估计算法是基于相当复杂的深度神经网络的，对于在嵌入式平台上进行实时推理来说太慢了。在嵌入式平台上进行推理，例如，安装在微型飞行器上的嵌入式平台。</p><p>在本文中，我们解决的问题是在嵌入式系统上的快速深度估计的问题。我们提出了一种高效和轻量级的编码器-解码器网络结构并应用网络剪裁来进一步降低计算复杂性和延时。特别是，我们专注于设计 一个低延迟的解码器。我们的方法证明了 有可能达到与先前的深度估计工作类似的精度，但推理速度要比先前的深度估计快一个数量级。<br>我们提出的网络，FastDepth，在NVIDIA Jetson TX2 GPU上的运行速度为178 fps，而在仅使用TX2 CPU时的运行速度为27 fps，有功功率低于10瓦。FastDepth在纽约大学深度v2数据上实现了接近最先进的精度。据作者所知，本文展示了在一个可由微型飞行器携带的嵌入式平台上使用深度神经网络进行实时的单眼深度估计，具有最低的延迟和最高的吞吐量。</p><ul><li>嵌入式系统上的快速深度估计的问题</li><li>提出了一种高效和轻量级的编码器-解码器网络，解码器经过特别设计了，低延迟</li><li>跟之前baseline比精度近似，快一个数量级（sota）</li><li>实验证明帧率很高</li></ul><hr><h3 id="之前的工作"><a href="#之前的工作" class="headerlink" title="之前的工作"></a>之前的工作</h3><p><img src="/img/2019FastDepth%E5%A4%8D%E7%8E%B0(tensorflow)/Untitled.png" alt="对比，第一张图"></p><p>这篇文章的related work写得不错，可以多看。</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><strong>这篇就是一个比较纯粹的技术报告，没啥数学推导啥的，重点在复现。</strong></p><p>本文提出了一种低延迟，运行在嵌入式系统上的高效、高吞吐量、高精度的深度估计算法。我们提出了一种有效的编解码器网络体系结构，重点是低延迟设计。我们的方法使用MobileNet作为编码器，在解码器中使用深度可分离卷积的最近邻内插。我们应用了最先进的网络修剪NetAdapt，并使用TVM编译器堆栈来进一步减少目标嵌入式平台上的推理运行时间。</p><ul><li>编码器-解码器结构，编码器用MobileNet，解码器用的深度可分离卷积的最近邻内插</li><li>手工设计网络参数冗余，训练时剪枝了</li><li>因为当时嵌入式平台没有对MobileNet的可分离卷积作优化，还对这个用TVM编译器做了优化</li></ul><h3 id="网络主体"><a href="#网络主体" class="headerlink" title="网络主体"></a>网络主体</h3><p><img src="/img/2019FastDepth%E5%A4%8D%E7%8E%B0(tensorflow)/Untitled%201.png" alt="结构"></p><p>21年了再看这个网络没啥新鲜的，主要注意有三个跨层连接，跨层通道没有作卷积操作，所以需要两者相和时维度一致。然后数据集并不是224*224的，输入时需要降采样。<br>解码器是试出来的，在这篇文章的实验部分有写。</p><p>注意理解上采样部分的转置卷积，以及stride&gt;1对应的微步卷积</p><p><a href="https://www.jianshu.com/p/cad419491760">上池化(unpooling),上采样(unsampling)和反卷积(deconvolution)的区别 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/qq_39478403/article/details/121181904">【机器学习】详解 转置卷积 (Transpose Convolution)_花与人间事同的博客-CSDN博客_转置卷积</a></p><p><a href="https://www.jianshu.com/p/2832e42f637f">单目图像深度估计算法-FastDepth - 简书 (jianshu.com)</a></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="先直接上代码"><a href="#先直接上代码" class="headerlink" title="先直接上代码"></a>先直接上代码</h3><p>以下代码在gitee smart_sever仓库里也有 fastdepth_train_test_model.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Conv2D, UpSampling2D, SeparableConv2D, BatchNormalization, Activation, add<br><span class="hljs-keyword">from</span> tensorflow.keras.models <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> optimizers<br><span class="hljs-keyword">from</span> tensorflow.keras.callbacks <span class="hljs-keyword">import</span> ModelCheckpoint<br><span class="hljs-keyword">from</span> tensorflow.keras.applications.mobilenet <span class="hljs-keyword">import</span> MobileNet<br><span class="hljs-comment"># 加载.h5图片数据</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> tensorflow.keras.utils <span class="hljs-keyword">import</span> <span class="hljs-type">Sequence</span><br><span class="hljs-keyword">from</span> tensorflow.keras.models <span class="hljs-keyword">import</span> Sequential<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Layer<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> h5py <span class="hljs-keyword">as</span> h5<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-string">&quot;&quot;&quot; DataGenerator初始化&quot;&quot;&quot;</span><br>input_size=(<span class="hljs-number">224</span>,<span class="hljs-number">224</span>)<br>shuffle=<span class="hljs-literal">True</span><br>train_txt_path=<span class="hljs-string">&#x27;/data0/lijiaqi/traindata/nyudepthv2/train.txt&#x27;</span><br>val_txt_path=<span class="hljs-string">&#x27;/data0/lijiaqi/traindata/nyudepthv2/val.txt&#x27;</span><br><br><span class="hljs-comment"># 训练时每个epoch中的step数量，在训练集DataGenerator的init函数中自动赋值，无需更改</span><br>train_steps_per_epoch=<span class="hljs-number">10</span><br>val_steps_per_epoch=<span class="hljs-number">10</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataGenerator</span>(<span class="hljs-title class_ inherited__">Sequence</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    基于Sequence的自定义Keras数据生成器</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, txt_path , to_fit, batch_size=<span class="hljs-number">5</span>, shuffle=shuffle</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :rtype: object</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 初始化方法</span><br>        <span class="hljs-comment"># :param data_txt_path: 存h5数据路径的txt的所在位置</span><br>        <span class="hljs-comment"># :param data_path_list:     h5数据路径列表</span><br>        <span class="hljs-comment"># :param to_fit: 设定是否返回结果y</span><br>        <span class="hljs-comment"># :param batch_size: batch size</span><br>        <span class="hljs-comment"># :param shuffle: 每一个epoch后是否打乱数据</span><br><br>        self.data_txt_path = txt_path<br>        self.data_path_list=<span class="hljs-built_in">open</span>(txt_path, <span class="hljs-string">&#x27;r&#x27;</span>).readlines()<br>        <span class="hljs-comment"># data_num_all 训练集/验证集中的数据个数</span><br>        self.data_num_all=<span class="hljs-built_in">len</span>(self.data_path_list)<br>        self.batch_size = batch_size<br>        <br>        <span class="hljs-comment"># 为训练集DataGenerator时，初始化steps_per_epoch</span><br>        <span class="hljs-keyword">if</span> txt_path==train_txt_path:<br>            self.steps_per_epoch=self.data_num_all // self.batch_size<br>            <span class="hljs-keyword">global</span> train_steps_per_epoch<br>            train_steps_per_epoch=self.steps_per_epoch<br>            <span class="hljs-comment">#训练集按照给定的batch_size生成</span><br>            self.batch_size = batch_size<br>        <span class="hljs-keyword">elif</span> txt_path == val_txt_path:<br>            <span class="hljs-comment">#验证集的batch_size向训练集定下的steps_per_epoch对齐</span><br>            <span class="hljs-keyword">global</span> val_steps_per_epoch<br>            self.batch_size = self.data_num_all // val_steps_per_epoch<br>            <br>        <br>        self.indexes_all=np.arange(self.data_num_all)<br>        self.to_fit = to_fit<br>        self.shuffle = shuffle<br>        self.on_epoch_end()<br>        self.input_size=input_size<br>        self.n_channels=<span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成每一批次训练数据</span><br><span class="hljs-string">        :param index: batch索引</span><br><span class="hljs-string">        :return: 训练图像和标签</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 生成批次索引</span><br>        indexes_batch = self.indexes_all[index * self.batch_size:<span class="hljs-built_in">min</span>((index + <span class="hljs-number">1</span>) * self.batch_size,self.data_num_all)]<br>        <span class="hljs-comment"># 索引列表</span><br>        batch_path_list = [self.data_path_list[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> indexes_batch]<br>        <span class="hljs-comment"># 生成数据</span><br>        X = self._generate_X(batch_path_list)<br>        <span class="hljs-keyword">if</span> self.to_fit:<br>            y = self._generate_y(batch_path_list)<br>            <span class="hljs-keyword">return</span> X, y<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> X<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;每个epoch下的批次数量</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(np.floor(self.data_num_all / self.batch_size))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_epoch_end</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;每个epoch之后更新索引</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.indexes_all = np.arange(self.data_num_all)<br>        <span class="hljs-keyword">if</span> self.shuffle == <span class="hljs-literal">True</span>:<br>            np.random.shuffle(self.indexes_all)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_X</span>(<span class="hljs-params">self, batch_path_list</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成每一批次的图像</span><br><span class="hljs-string">        :param batch_path_list: 批次数据索引列表</span><br><span class="hljs-string">        :return: 一个批次的图像 shape(batch_size,w,h,channel)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 初始化</span><br>        X = np.empty((self.batch_size, *self.input_size, self.n_channels))<br>        <span class="hljs-comment"># 生成数据</span><br>        <span class="hljs-keyword">for</span> i, path <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(batch_path_list):<br>            <span class="hljs-comment"># 存储一个批次</span><br>            X[i,] = self._load_h5(path[:-<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;x&#x27;</span>)<br>        <span class="hljs-keyword">return</span> X<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_y</span>(<span class="hljs-params">self, batch_path_list</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成每一批次的图像</span><br><span class="hljs-string">        :param batch_path_list: 批次数据索引列表</span><br><span class="hljs-string">        :return: 一个批次的图像 shape(batch_size,w,h,channel)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 初始化</span><br>        y = np.empty((self.batch_size, *self.input_size, <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># 生成数据</span><br>        <span class="hljs-keyword">for</span> i, path <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(batch_path_list):<br>            <span class="hljs-comment"># 存储一个批次</span><br>            y[i,] = self._load_h5(path[:-<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;y&#x27;</span>)<br>        <span class="hljs-keyword">return</span> y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_load_h5</span>(<span class="hljs-params">self, path, xory</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;读取h5数据</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        h5_file = h5.File(path, <span class="hljs-string">&quot;r&quot;</span>)<br>        <span class="hljs-keyword">if</span>(xory==<span class="hljs-string">&#x27;x&#x27;</span>):<br>            np_file = h5_file.get(<span class="hljs-string">&#x27;rgb&#x27;</span>)<br>            shape=np_file.shape<br>            <span class="hljs-comment">#print(shape)</span><br>            <span class="hljs-comment">#调整rgb通道至最后一维</span><br>            rgb_raw=np.transpose(np_file,(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br>            <span class="hljs-comment">#降采样至224*224*3 标准输入</span><br>            rgb_downsample=cv2.resize(rgb_raw,dsize=(<span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<br>            <span class="hljs-keyword">return</span> rgb_downsample<br>        <span class="hljs-keyword">elif</span>(xory==<span class="hljs-string">&#x27;y&#x27;</span>):<br>            np_file = h5_file.get(<span class="hljs-string">&#x27;depth&#x27;</span>)<br>            shape=np_file.shape<br>            <span class="hljs-comment">#print(shape)</span><br>            <span class="hljs-comment">#调整深度图w,h</span><br>            depth_raw=np.transpose(np_file,(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<br>            <span class="hljs-comment">#降采样至224*224，增加维度至224*224*1标准输出 </span><br>            depth_downsample=cv2.resize(depth_raw,dsize=(<span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<br>            depth_downsample=np.expand_dims(depth_downsample,<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> depth_downsample<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error0&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FastDepth</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.build_net()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_SDWConv</span>(<span class="hljs-params">self, filtres, kernel</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>            x = SeparableConv2D(filtres, kernel, padding=<span class="hljs-string">&#x27;same&#x27;</span>)(x)<br>            x = BatchNormalization()(x)<br>            x = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)(x)<br><br>            <span class="hljs-keyword">return</span> x<br><br>        <span class="hljs-keyword">return</span> f<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_encoder</span>(<span class="hljs-params">self</span>):<br>        self.MN = MobileNet(input_shape=(<span class="hljs-number">224</span>, <span class="hljs-number">224</span>, <span class="hljs-number">3</span>),<br>                            weights=<span class="hljs-literal">None</span>,<br>                            include_top=<span class="hljs-string">&#x27;False&#x27;</span>)<br><br>        <span class="hljs-comment"># 7*7*1024</span><br>        latent = self.MN.get_layer(<span class="hljs-string">&#x27;conv_pw_13_relu&#x27;</span>).output<br><br>        <span class="hljs-keyword">return</span> latent<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decoder</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 14*14*512</span><br>        x1 = self._SDWConv(<span class="hljs-number">512</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))(x)<br>        x1 = UpSampling2D()(x1)<br><br>        <span class="hljs-comment"># 28*28*256</span><br>        x2 = self._SDWConv(<span class="hljs-number">256</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))(x1)<br>        x2 = UpSampling2D()(x2)<br>        s2 = self.MN.get_layer(<span class="hljs-string">&#x27;conv_pw_5_relu&#x27;</span>).output<br>        x2 = add([x2, s2])<br><br>        <span class="hljs-comment"># 56*56*128</span><br>        x3 = self._SDWConv(<span class="hljs-number">128</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))(x2)<br>        x3 = UpSampling2D()(x3)<br>        s3 = self.MN.get_layer(<span class="hljs-string">&#x27;conv_pw_3_relu&#x27;</span>).output<br>        x3 = add([x3, s3])<br><br>        <span class="hljs-comment"># 112*112*64</span><br>        x4 = self._SDWConv(<span class="hljs-number">64</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))(x3)<br>        x4 = UpSampling2D()(x4)<br>        s4 = self.MN.get_layer(<span class="hljs-string">&#x27;conv_pw_1_relu&#x27;</span>).output<br>        x4 = add([x4, s4])<br><br>        <span class="hljs-comment"># 224*224*32</span><br>        x5 = self._SDWConv(<span class="hljs-number">32</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))(x4)<br>        x5 = UpSampling2D()(x5)<br><br>        <span class="hljs-keyword">return</span> x5<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build_net</span>(<span class="hljs-params">self</span>):<br>        latent = self._encoder()<br>        out = self._decoder(latent)<br>        out_dense = Conv2D(<span class="hljs-number">1</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))(out)<br><br>        self.model = Model(inputs=self.MN.<span class="hljs-built_in">input</span>, outputs=out_dense)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    <span class="hljs-comment"># Generators</span><br>    <span class="hljs-comment"># 72.76</span><br>    train_batchsize=<span class="hljs-number">64</span><br>    train_steps_per_epoch=<span class="hljs-number">10</span><br>    val_steps_per_epoch=<span class="hljs-number">20</span><br>    model_save_filepath=<span class="hljs-string">&quot;/data0/lijiaqi/smart_server/2019fastdepth/model_parameter_save&quot;</span><br>    training_generator = DataGenerator(train_txt_path, to_fit=<span class="hljs-literal">True</span>,batch_size=train_batchsize)<br>    validation_generator = DataGenerator(val_txt_path, to_fit=<span class="hljs-literal">True</span>)<br>    net = FastDepth()<br>    <span class="hljs-comment">#网络参数</span><br>    <span class="hljs-comment">#net.model.summary()</span><br>    net.model.<span class="hljs-built_in">compile</span>(optimizer=optimizers.SGD(lr=<span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.9</span>, decay=<span class="hljs-number">0.0001</span>, nesterov=<span class="hljs-literal">False</span>),<br>              loss=<span class="hljs-string">&#x27;mse&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><br>    <span class="hljs-comment"># checkpoint = ModelCheckpoint(model_save_filepath+&#x27;/&#x27;+datetime.datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;),monitor=&#x27;val_loss&#x27;, save_weights_only=True,verbose=1,save_best_only=False, period=1)</span><br>    <br>    <span class="hljs-comment"># if os.path.exists(filepath):</span><br>    <span class="hljs-comment">#     model.load_weights(filepath)</span><br>    <span class="hljs-comment">#     # 若成功加载前面保存的参数，输出下列信息</span><br>    <span class="hljs-comment">#     print(&quot;checkpoint_loaded&quot;)</span><br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;compile finished&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train_steps_per_epoch:&quot;</span>,train_steps_per_epoch)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;validation_generator.batch_size:&quot;</span>,validation_generator.batch_size)<br><br>    <span class="hljs-comment"># test for DataGenerator</span><br>    <span class="hljs-comment"># training_generator作为迭代器返回的turple结构为（迭代次数i，（train_x,train_y））</span><br>    <span class="hljs-comment"># for i,(train_x,train_y) in enumerate(training_generator):</span><br>    <span class="hljs-comment">#     print(train_x.shape)</span><br>    <span class="hljs-comment">#     print(train_y.shape)</span><br>    <span class="hljs-comment">#     print(i)</span><br>    <span class="hljs-comment">#     break</span><br><br>    <span class="hljs-comment"># train with fit_generator</span><br>    history=net.model.fit_generator(generator=training_generator,<br>                            validation_data=validation_generator,<br>                            epochs=<span class="hljs-number">100</span>,<br>                            max_queue_size=<span class="hljs-number">64</span>,<br>                            steps_per_epoch=train_steps_per_epoch,<br>                            validation_steps=val_steps_per_epoch,<br>                            callbacks=[ModelCheckpoint(os.path.join(model_save_filepath, <span class="hljs-string">&#x27;model_&#123;epoch:04d&#125;_&#123;val_loss:.6f&#125;.hdf5&#x27;</span>), <br>                                                        monitor=<span class="hljs-string">&#x27;val_loss&#x27;</span>, save_weights_only=<span class="hljs-literal">True</span>, <br>                                                        verbose=<span class="hljs-number">1</span>,save_best_only=<span class="hljs-literal">False</span>, period=<span class="hljs-number">1</span>)],<br>                            verbose=<span class="hljs-number">1</span>)<br>    accy=history.history[<span class="hljs-string">&#x27;accuracy&#x27;</span>]<br>    lossy = history.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>    np_accy = np.array(accy).reshape((<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(accy))) <span class="hljs-comment">#reshape是为了能够跟别的信息组成矩阵一起存储</span><br>    np_lossy =np.array(lossy).reshape((<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(lossy)))<br>    <span class="hljs-comment">#np_out = np.concatenate([np_accy,np_lossy],axis=0)</span><br>    np.savetxt(<span class="hljs-string">&#x27;history_acc.txt&#x27;</span>,np_accy)<br>    np.savetxt(<span class="hljs-string">&#x27;history_loss.txt&#x27;</span>,np_lossy)       <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;保存文件成功&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>之前配的有问题报错，hls上来就弄好了，生成了yml文件</p><p>之后改了一点，156的服务器直接能装，普通电脑可能要看一下版本号手动装</p><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>tensorflow没有pytorch的dataset那么好用的dataloader，本来是做的pytorch的dataset+keras做训练的一个杂交，因为MAI比赛需要全tensorflow所以被否了。</p><p>用到的nyudepthv2数据集的构造跟一般数据集类似</p><p><img src="/img/2019FastDepth%E5%A4%8D%E7%8E%B0(tensorflow)/Untitled%204.png"></p><p><img src="/img/2019FastDepth%E5%A4%8D%E7%8E%B0(tensorflow)/Untitled%202.png"></p><p><img src="/img/2019FastDepth%E5%A4%8D%E7%8E%B0(tensorflow)/Untitled%203.png"></p><p>train.txt和val.txt是我生成的，包含全部h5文件的绝对路径，用的creat_data_index.py仓库里也有，代码不贴了，需要注意os路径和h5文件的读取（需要先get对应的value），里面还包含了图像调整通道和resize降采样，一堆小的api，对数据预处理挺有用的，以后可以多看看</p><h3 id="Datagenerator"><a href="#Datagenerator" class="headerlink" title="Datagenerator"></a><strong>Datagenerator</strong></h3><p>注释写得挺详细的，直接看上面对应代码就行了</p><p>参考链接（含可运行代码）：</p><p><a href="https://blog.csdn.net/orDream/article/details/107182781?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&utm_relevant_index=1">如何在Keras中使用数据生成器（data generators）的详细示例_orDream的博客-CSDN博客</a></p><h3 id="网络主体-1"><a href="#网络主体-1" class="headerlink" title="网络主体"></a>网络主体</h3><p>之前的笔记部分有细讲，这个主题难点就是keras.model基本框架用法和几个跨层连接，需要多看</p><h3 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># Generators</span><br>    <span class="hljs-comment"># 72.76</span><br>    train_batchsize=<span class="hljs-number">64</span><br>    train_steps_per_epoch=<span class="hljs-number">10</span><br>    val_steps_per_epoch=<span class="hljs-number">20</span><br>    model_save_filepath=<span class="hljs-string">&quot;/data0/lijiaqi/smart_server/2019fastdepth/model_parameter_save&quot;</span><br>    training_generator = DataGenerator(train_txt_path, to_fit=<span class="hljs-literal">True</span>,batch_size=train_batchsize)<br>    validation_generator = DataGenerator(val_txt_path, to_fit=<span class="hljs-literal">True</span>)<br>    net = FastDepth()<br>    <span class="hljs-comment">#网络参数</span><br>    <span class="hljs-comment">#net.model.summary()</span><br>    net.model.<span class="hljs-built_in">compile</span>(optimizer=optimizers.SGD(lr=<span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.9</span>, decay=<span class="hljs-number">0.0001</span>, nesterov=<span class="hljs-literal">False</span>),<br>              loss=<span class="hljs-string">&#x27;mse&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><br>    <span class="hljs-comment"># checkpoint = ModelCheckpoint(model_save_filepath+&#x27;/&#x27;+datetime.datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;),monitor=&#x27;val_loss&#x27;, save_weights_only=True,verbose=1,save_best_only=False, period=1)</span><br>    <br>    <span class="hljs-comment"># if os.path.exists(filepath):</span><br>    <span class="hljs-comment">#     model.load_weights(filepath)</span><br>    <span class="hljs-comment">#     # 若成功加载前面保存的参数，输出下列信息</span><br>    <span class="hljs-comment">#     print(&quot;checkpoint_loaded&quot;)</span><br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;compile finished&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train_steps_per_epoch:&quot;</span>,train_steps_per_epoch)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;validation_generator.batch_size:&quot;</span>,validation_generator.batch_size)<br><br>    <span class="hljs-comment"># test for DataGenerator</span><br>    <span class="hljs-comment"># training_generator作为迭代器返回的turple结构为（迭代次数i，（train_x,train_y））</span><br>    <span class="hljs-comment"># for i,(train_x,train_y) in enumerate(training_generator):</span><br>    <span class="hljs-comment">#     print(train_x.shape)</span><br>    <span class="hljs-comment">#     print(train_y.shape)</span><br>    <span class="hljs-comment">#     print(i)</span><br>    <span class="hljs-comment">#     break</span><br><br>    <span class="hljs-comment"># train with fit_generator</span><br>    history=net.model.fit_generator(generator=training_generator,<br>                            validation_data=validation_generator,<br>                            epochs=<span class="hljs-number">100</span>,<br>                            max_queue_size=<span class="hljs-number">64</span>,<br>                            steps_per_epoch=train_steps_per_epoch,<br>                            validation_steps=val_steps_per_epoch,<br>                            callbacks=[ModelCheckpoint(os.path.join(model_save_filepath, <span class="hljs-string">&#x27;model_&#123;epoch:04d&#125;_&#123;val_loss:.6f&#125;.hdf5&#x27;</span>), <br>                                                        monitor=<span class="hljs-string">&#x27;val_loss&#x27;</span>, save_weights_only=<span class="hljs-literal">True</span>, <br>                                                        verbose=<span class="hljs-number">1</span>,save_best_only=<span class="hljs-literal">False</span>, period=<span class="hljs-number">1</span>)],<br>                            verbose=<span class="hljs-number">1</span>)<br>    accy=history.history[<span class="hljs-string">&#x27;accuracy&#x27;</span>]<br>    lossy = history.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>    np_accy = np.array(accy).reshape((<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(accy))) <span class="hljs-comment">#reshape是为了能够跟别的信息组成矩阵一起存储</span><br>    np_lossy =np.array(lossy).reshape((<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(lossy)))<br>    <span class="hljs-comment">#np_out = np.concatenate([np_accy,np_lossy],axis=0)</span><br>    np.savetxt(<span class="hljs-string">&#x27;history_acc.txt&#x27;</span>,np_accy)<br>    np.savetxt(<span class="hljs-string">&#x27;history_loss.txt&#x27;</span>,np_lossy)       <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;保存文件成功&quot;</span>)<br></code></pre></td></tr></table></figure><p>直接写注意事项吧</p><ul><li>compile部分的optimizers可以自定参数等等（参考官方中文文档，这一部分写得凑合（链接））</li><li>注意fit_generator需要自己定义steps_per_epoch，这个参数可以在datagenerator的init里对齐训练的batchsize修改steps_per_epoch全局变量，验证集的validation_steps也得定义，跟steps_per_epoch一样就行</li><li>fit_generator利用callbacks机制保存每一个epoch的权重，改了一会，路径一般照着上面来就行</li><li>verbose为0不输出epoch结果，为1输出进度条</li><li>fit_generator返回一个history，照着上面保存accuracy和loss就行</li></ul><h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><p>这个train还差导入已经训好的权重，这篇就不补了，之后自己去仓库找</p><ul><li>一般调代码训练的流程是：</li><li>写网络主体结构，compile之后summary看一下参数对不对</li><li>用几个random的数组作为traindata试一下输入输出或者中间结果的size符不符合预期</li><li>写datagenerator，生成enumerate打印每次的生成数据对不对</li><li>套进去开训，中间参数checkpoints啥的细节优化</li></ul><p>之后需要写一个pytorch一般框架（挖坑）</p>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2015ResNet复现</title>
    <link href="/2022/02/10/2015Resnet%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/02/10/2015Resnet%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<aside>💡 本文备份此前做过的Resnet复现代码，含注释<h1 id="Resnet"><a href="#Resnet" class="headerlink" title="Resnet"></a>Resnet</h1><p>综述</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>残差神经网络(ResNet)是由微软研究院的何恺明、张祥雨、任少卿、孙剑等人提出的。ResNet 在2015 年的ILSVRC（ImageNet Large Scale Visual Recognition Challenge）中取得了冠军。</p><p>残差神经网络的主要贡献是发现了“退化现象（Degradation）”，并针对退化现象发明了 “快捷连接（Shortcut connection）”，极大的消除了深度过大的神经网络训练困难问题。神经网络的“深度”首次突破了100层、最大的神经网络甚至超过了1000层。</p><p>论文网址：</p><p><a href="https://arxiv.org/abs/1512.03385">Deep Residual Learning for Image Recognition</a></p><h3 id="复现代码"><a href="#复现代码" class="headerlink" title="复现代码"></a>复现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, confusion_matrix, classification_report<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> Adam<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> Data<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torchvision.datasets <span class="hljs-keyword">import</span> FashionMNIST<br><br><span class="hljs-comment"># 处理训练集数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_data_process</span>():<br>    <span class="hljs-comment"># 加载FashionMNIST数据集</span><br>    train_data = FashionMNIST(root=<span class="hljs-string">&quot;../data/fashionmnist&quot;</span>,  <span class="hljs-comment"># 数据路径</span><br>                              train=<span class="hljs-literal">True</span>,  <span class="hljs-comment"># 只使用训练数据集</span><br>                              transform=transforms.Compose([transforms.Resize(size=<span class="hljs-number">224</span>), transforms.ToTensor()]),<br>                              <span class="hljs-comment"># 把PIL.Image或者numpy.array数据类型转变为torch.FloatTensor类型</span><br>                              <span class="hljs-comment"># 尺寸为Channel * Height * Width，数值范围缩小为[0.0, 1.0]</span><br>                              download=<span class="hljs-literal">True</span>,  <span class="hljs-comment"># 若本身没有下载相应的数据集，则选择True</span><br>                              )<br>    train_loader = Data.DataLoader(dataset=train_data,  <span class="hljs-comment"># 传入的数据集</span><br>                                   batch_size=<span class="hljs-number">64</span>,  <span class="hljs-comment"># 每个Batch中含有的样本数量</span><br>                                   shuffle=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 不对数据集重新排序</span><br>                                   num_workers=<span class="hljs-number">0</span>,  <span class="hljs-comment"># 加载数据所开启的进程数量</span><br>                                   )<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The number of batch in train_loader:&quot;</span>, <span class="hljs-built_in">len</span>(train_loader))  <span class="hljs-comment"># 一共有938个batch，每个batch含有64个训练样本</span><br><br>    <span class="hljs-comment"># 获得一个Batch的数据</span><br>    <span class="hljs-keyword">for</span> step, (b_x, b_y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader):<br>        <span class="hljs-keyword">if</span> step &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    batch_x = b_x.squeeze().numpy()  <br>    <span class="hljs-comment"># 将四维张量移除第1维，并转换成Numpy数组</span><br>    <span class="hljs-comment"># squeeze方法用于删除shape为1的维度</span><br>    batch_y = b_y.numpy()  <br>    <span class="hljs-comment"># 将张量转换成Numpy数组</span><br>    class_label = train_data.classes  <br>    <span class="hljs-comment"># 训练集的标签</span><br>    class_label[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;T-shirt&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the size of batch in train data:&quot;</span>, batch_x.shape)<br><br>    <span class="hljs-comment"># plt可视化一个Batch的图像</span><br>    plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>))<br>    <span class="hljs-comment">#figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True)</span><br><span class="hljs-comment">#num:图像编号或名称，数字为编号 ，字符串为名称figsize:指定figure的宽和高，单位为英寸；</span><br><span class="hljs-comment">#dpi参数指定绘图对象的分辨率，即每英寸多少个像素，缺省值为80     facecolor:背景颜色</span><br><span class="hljs-comment">#edgecolor:边框颜色frameon:是否显示边框</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> np.arange(<span class="hljs-built_in">len</span>(batch_y)):<br>        plt.subplot(<span class="hljs-number">4</span>, <span class="hljs-number">16</span>, ii + <span class="hljs-number">1</span>)<br>        <span class="hljs-comment">#subplot(nrows行数,ncols列数,xy偏移量sharex,sharey,subplot_kw,**fig_kw)</span><br>        <span class="hljs-comment">#eg.plt.subplot(221)  </span><br>        plt.imshow(batch_x[ii, :, :], cmap=plt.cm.gray)<br>        plt.title(class_label[batch_y[ii]], size=<span class="hljs-number">9</span>)<br>        plt.axis(<span class="hljs-string">&quot;off&quot;</span>)<br>        plt.subplots_adjust(wspace=<span class="hljs-number">0.05</span>)<br>    plt.show()<br><br>    <span class="hljs-keyword">return</span> train_loader, class_label<br><br><span class="hljs-comment"># 处理测试集数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_data_process</span>():<br>    test_data = FashionMNIST(root=<span class="hljs-string">&quot;../data/fashionmnist&quot;</span>,  <span class="hljs-comment"># 数据路径</span><br>                             train=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 不使用训练数据集</span><br>                             transform=transforms.Compose([transforms.Resize(size=<span class="hljs-number">224</span>), transforms.ToTensor()]),  <br>                             <span class="hljs-comment"># 把PIL.Image或者numpy.array数据类型转变为torch.FloatTensor类型</span><br>                             <span class="hljs-comment"># 尺寸为Channel * Height * Width，数值范围缩小为[0.0, 1.0]</span><br>                             download=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 如果前面数据已经下载，这里不再需要重复下载</span><br>                             )<br>    test_loader = Data.DataLoader(dataset=test_data,  <span class="hljs-comment"># 传入的数据集</span><br>                                  batch_size=<span class="hljs-number">1</span>,  <span class="hljs-comment"># 每个Batch中含有的样本数量</span><br>                                  shuffle=<span class="hljs-literal">True</span>,  <span class="hljs-comment"># 不对数据集重新排序</span><br>                                  num_workers=<span class="hljs-number">0</span>,  <span class="hljs-comment"># 加载数据所开启的进程数量</span><br>                                   )<br><br>    <span class="hljs-comment"># 获得一个Batch的数据</span><br>    <span class="hljs-keyword">for</span> step, (b_x, b_y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_loader):<br>        <span class="hljs-keyword">if</span> step &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>    batch_x = b_x.squeeze().numpy()  <span class="hljs-comment"># 将四维张量移除第1维，并转换成Numpy数组</span><br>    batch_y = b_y.numpy()  <span class="hljs-comment"># 将张量转换成Numpy数组</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The size of batch in test data:&quot;</span>, batch_x.shape)<br><br>    <span class="hljs-keyword">return</span> test_loader<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Residual</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels, out_channels, use_1x1conv=<span class="hljs-literal">False</span>, stride=<span class="hljs-number">1</span></span>):  <span class="hljs-comment"># 输入通道数，输出通道数，跨层使能1x1卷积，步长</span><br>        <span class="hljs-built_in">super</span>(Residual, self).__init__()<br><span class="hljs-comment">#继承初始化</span><br>        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>, stride=stride)  <span class="hljs-comment"># 定义第一个卷积块</span><br>        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 定义第二个卷积块</span><br><br>        <span class="hljs-comment"># 定义1x1卷积块</span><br>        <span class="hljs-keyword">if</span> use_1x1conv:<br>            self.conv3 = nn.Conv2d(in_channels, out_channels, kernel_size=<span class="hljs-number">1</span>, stride=stride)<br>        <span class="hljs-keyword">else</span>:<br>            self.conv3 = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># Batch归一化</span><br>        self.bn1 = nn.BatchNorm2d(out_channels)<br>        self.bn2 = nn.BatchNorm2d(out_channels)<br><br>    <span class="hljs-comment"># 定义前向传播路径</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        y = nn.functional.relu(self.bn1(self.conv1(x)))<br>        y = self.bn2(self.conv2(y))<br>        <span class="hljs-keyword">if</span> self.conv3:<br>            x = self.conv3(x)<br><span class="hljs-comment">#残差加和</span><br>        <span class="hljs-keyword">return</span> nn.functional.relu(y + x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resnet_block</span>(<span class="hljs-params">in_channels, out_channels, num_residuals, first_block=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> first_block:<br>        <span class="hljs-keyword">assert</span> in_channels == out_channels  <span class="hljs-comment"># 第一个模块的通道数同输入通道数一致</span><br>    blk = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_residuals):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> first_block:<br>            blk.append(Residual(in_channels, out_channels, use_1x1conv=<span class="hljs-literal">True</span>, stride=<span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">else</span>:<br>            blk.append(Residual(out_channels, out_channels))<br><br>    <span class="hljs-keyword">return</span> nn.Sequential(*blk)<br><br><span class="hljs-comment"># 定义一个全局平均池化层</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalAvgPool2d</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(GlobalAvgPool2d, self).__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> nn.functional.avg_pool2d(x, kernel_size=x.size()[<span class="hljs-number">2</span>:])  <span class="hljs-comment"># 池化窗口形状等于输入图像的形状</span><br><br><span class="hljs-comment"># 定义ResNet网络结构</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ResNet</span>():<br>    net = nn.Sequential(<br>        nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">7</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">3</span>),<br>        nn.BatchNorm2d(<span class="hljs-number">64</span>),<br>        nn.ReLU(),<br>        nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>))<br><br>    net.add_module(<span class="hljs-string">&quot;resnet_block1&quot;</span>, resnet_block(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">2</span>, first_block=<span class="hljs-literal">True</span>))<br>    net.add_module(<span class="hljs-string">&quot;resnet_block2&quot;</span>, resnet_block(<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">2</span>))<br>    net.add_module(<span class="hljs-string">&quot;resnet_block3&quot;</span>, resnet_block(<span class="hljs-number">128</span>, <span class="hljs-number">256</span>, <span class="hljs-number">2</span>))<br>    net.add_module(<span class="hljs-string">&quot;resnet_block4&quot;</span>, resnet_block(<span class="hljs-number">256</span>, <span class="hljs-number">512</span>, <span class="hljs-number">2</span>))<br>    net.add_module(<span class="hljs-string">&quot;global_avg_pool&quot;</span>, GlobalAvgPool2d())  <span class="hljs-comment"># GlobalAvgPool2d的输出: (Batch, 512, 1, 1)</span><br>    net.add_module(<span class="hljs-string">&quot;fc&quot;</span>, nn.Sequential(nn.Flatten(), nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">10</span>)))<br><br>    <span class="hljs-keyword">return</span> net<br><br><span class="hljs-comment"># 定义网络的训练过程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>(<span class="hljs-params">model, traindataloader, train_rate, criterion, device, optimizer, num_epochs=<span class="hljs-number">25</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    :param model: 网络模型</span><br><span class="hljs-string">    :param traindataloader: 训练数据集，会切分为训练集和验证集</span><br><span class="hljs-string">    :param train_rate: 训练集batch_size的百分比</span><br><span class="hljs-string">    :param criterion: 损失函数</span><br><span class="hljs-string">    :param device: 运行设备</span><br><span class="hljs-string">    :param optimizer: 优化方法</span><br><span class="hljs-string">    :param num_epochs: 训练的轮数</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    batch_num = <span class="hljs-built_in">len</span>(traindataloader)  <span class="hljs-comment"># batch数量</span><br>    train_batch_num = <span class="hljs-built_in">round</span>(batch_num * train_rate)  <span class="hljs-comment"># 将80%的batch用于训练，round()函数四舍五入</span><br>    best_model_wts = copy.deepcopy(model.state_dict())  <span class="hljs-comment"># 复制当前模型的参数</span><br>    <span class="hljs-comment"># 初始化参数</span><br>    best_acc = <span class="hljs-number">0.0</span>  <span class="hljs-comment"># 最高准确度</span><br>    train_loss_all = []  <span class="hljs-comment"># 训练集损失函数列表</span><br>    train_acc_all = []  <span class="hljs-comment"># 训练集准确度列表</span><br>    val_loss_all = []  <span class="hljs-comment"># 验证集损失函数列表</span><br>    val_acc_all = []  <span class="hljs-comment"># 验证集准确度列表</span><br>    since = time.time()  <span class="hljs-comment"># 当前时间</span><br>    <span class="hljs-comment"># 进行迭代训练模型</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch &#123;&#125;/&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(epoch, num_epochs - <span class="hljs-number">1</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">10</span>)<br><br>        <span class="hljs-comment"># 初始化参数</span><br>        train_loss = <span class="hljs-number">0.0</span>  <span class="hljs-comment"># 训练集损失函数</span><br>        train_corrects = <span class="hljs-number">0</span>  <span class="hljs-comment"># 训练集准确度</span><br>        train_num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 训练集样本数量</span><br>        val_loss = <span class="hljs-number">0.0</span>  <span class="hljs-comment"># 验证集损失函数</span><br>        val_corrects = <span class="hljs-number">0</span>  <span class="hljs-comment"># 验证集准确度</span><br>        val_num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 验证集样本数量</span><br>        <span class="hljs-comment"># 对每一个mini-batch训练和计算</span><br>        <span class="hljs-keyword">for</span> step, (b_x, b_y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(traindataloader):<br>            b_x = b_x.to(device)<br>            b_y = b_y.to(device)<br>            <span class="hljs-keyword">if</span> step &lt; train_batch_num:  <span class="hljs-comment"># 使用数据集的80%用于训练</span><br>                model.train()  <span class="hljs-comment"># 设置模型为训练模式，启用Batch Normalization和Dropout</span><br>                output = model(b_x)  <span class="hljs-comment"># 前向传播过程，输入为一个batch，输出为一个batch中对应的预测</span><br>                pre_lab = torch.argmax(output, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 查找每一行中最大值对应的行标</span><br>                loss = criterion(output, b_y)  <span class="hljs-comment"># 计算每一个batch的损失函数</span><br>                optimizer.zero_grad()  <span class="hljs-comment"># 将梯度初始化为0</span><br>                loss.backward()  <span class="hljs-comment"># 反向传播计算</span><br>                optimizer.step()  <span class="hljs-comment"># 根据网络反向传播的梯度信息来更新网络的参数，以起到降低loss函数计算值的作用</span><br>                train_loss += loss.item() * b_x.size(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 对损失函数进行累加</span><br>                train_corrects += torch.<span class="hljs-built_in">sum</span>(pre_lab == b_y.data)  <span class="hljs-comment"># 如果预测正确，则准确度train_corrects加1</span><br>                train_num += b_x.size(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 当前用于训练的样本数量</span><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 使用数据集的20%用于验证</span><br>                model.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 设置模型为评估模式，不启用Batch Normalization和Dropout</span><br>                output = model(b_x)  <span class="hljs-comment"># 前向传播过程，输入为一个batch，输出为一个batch中对应的预测</span><br>                pre_lab = torch.argmax(output, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 查找每一行中最大值对应的行标</span><br>                loss = criterion(output, b_y)  <span class="hljs-comment"># 计算每一个batch中64个样本的平均损失函数</span><br>                val_loss += loss.item() * b_x.size(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 将验证集中每一个batch的损失函数进行累加</span><br>                val_corrects += torch.<span class="hljs-built_in">sum</span>(pre_lab == b_y.data)  <span class="hljs-comment"># 如果预测正确，则准确度val_corrects加1</span><br>                val_num += b_x.size(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 当前用于验证的样本数量</span><br><br>        <span class="hljs-comment"># 计算并保存每一次迭代的成本函数和准确率</span><br>        train_loss_all.append(train_loss / train_num)  <span class="hljs-comment"># 计算并保存训练集的成本函数</span><br>        train_acc_all.append(train_corrects.double().item() / train_num)  <span class="hljs-comment"># 计算并保存训练集的准确率</span><br>        val_loss_all.append(val_loss / val_num)  <span class="hljs-comment"># 计算并保存验证集的成本函数</span><br>        val_acc_all.append(val_corrects.double().item() / val_num)  <span class="hljs-comment"># 计算并保存验证集的准确率</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; Train Loss: &#123;:.4f&#125; Train Acc: &#123;:.4f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(epoch, train_loss_all[-<span class="hljs-number">1</span>], train_acc_all[-<span class="hljs-number">1</span>]))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; Val Loss: &#123;:.4f&#125; Val Acc: &#123;:.4f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(epoch, val_loss_all[-<span class="hljs-number">1</span>], val_acc_all[-<span class="hljs-number">1</span>]))<br><br>        <span class="hljs-comment"># 寻找最高准确度</span><br>        <span class="hljs-keyword">if</span> val_acc_all[-<span class="hljs-number">1</span>] &gt; best_acc:<br>            best_acc = val_acc_all[-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 保存当前的最高准确度</span><br>            best_model_wts = copy.deepcopy(model.state_dict())  <span class="hljs-comment"># 保存当前最高准确度下的模型参数</span><br>        time_use = time.time() - since  <span class="hljs-comment"># 计算耗费时间</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Train and val complete in &#123;:.0f&#125;m &#123;:.0f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(time_use // <span class="hljs-number">60</span>, time_use % <span class="hljs-number">60</span>))<br><br>    <span class="hljs-comment"># 选择最优参数</span><br>    model.load_state_dict(best_model_wts)  <span class="hljs-comment"># 加载最高准确度下的模型参数</span><br>    train_process = pd.DataFrame(data=&#123;<span class="hljs-string">&quot;epoch&quot;</span>: <span class="hljs-built_in">range</span>(num_epochs),<br>                                       <span class="hljs-string">&quot;train_loss_all&quot;</span>: train_loss_all,<br>                                       <span class="hljs-string">&quot;val_loss_all&quot;</span>: val_loss_all,<br>                                       <span class="hljs-string">&quot;train_acc_all&quot;</span>: train_acc_all,<br>                                       <span class="hljs-string">&quot;val_acc_all&quot;</span>: val_acc_all&#125;<br>                                 )  <span class="hljs-comment"># 将每一代的损失函数和准确度保存为DataFrame格式</span><br><br>    <span class="hljs-comment"># 显示每一次迭代后的训练集和验证集的损失函数和准确率</span><br>    plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">4</span>))<br>    plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>    plt.plot(train_process[<span class="hljs-string">&#x27;epoch&#x27;</span>], train_process.train_loss_all, <span class="hljs-string">&quot;ro-&quot;</span>, label=<span class="hljs-string">&quot;Train loss&quot;</span>)<br>    plt.plot(train_process[<span class="hljs-string">&#x27;epoch&#x27;</span>], train_process.val_loss_all, <span class="hljs-string">&quot;bs-&quot;</span>, label=<span class="hljs-string">&quot;Val loss&quot;</span>)<br>    plt.legend()<br>    plt.xlabel(<span class="hljs-string">&quot;epoch&quot;</span>)<br>    plt.ylabel(<span class="hljs-string">&quot;Loss&quot;</span>)<br>    plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>    plt.plot(train_process[<span class="hljs-string">&#x27;epoch&#x27;</span>], train_process.train_acc_all, <span class="hljs-string">&quot;ro-&quot;</span>, label=<span class="hljs-string">&quot;Train acc&quot;</span>)<br>    plt.plot(train_process[<span class="hljs-string">&#x27;epoch&#x27;</span>], train_process.val_acc_all, <span class="hljs-string">&quot;bs-&quot;</span>, label=<span class="hljs-string">&quot;Val acc&quot;</span>)<br>    plt.xlabel(<span class="hljs-string">&quot;epoch&quot;</span>)<br>    plt.ylabel(<span class="hljs-string">&quot;acc&quot;</span>)<br>    plt.legend()<br>    plt.show()<br><br>    <span class="hljs-keyword">return</span> model, train_process<br><br><span class="hljs-comment"># 测试模型</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_model</span>(<span class="hljs-params">model, testdataloader, device</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    :param model: 网络模型</span><br><span class="hljs-string">    :param testdataloader: 测试数据集</span><br><span class="hljs-string">    :param device: 运行设备</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 初始化参数</span><br>    test_corrects = <span class="hljs-number">0.0</span><br>    test_num = <span class="hljs-number">0</span><br>    test_acc = <span class="hljs-number">0.0</span><br>    <span class="hljs-comment"># 只进行前向传播计算，不计算梯度，从而节省内存，加快运行速度</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> test_data_x, test_data_y <span class="hljs-keyword">in</span> testdataloader:<br>            test_data_x = test_data_x.to(device)<br>            test_data_y = test_data_y.to(device)<br>            model.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 设置模型为评估模式，不启用Batch Normalization和Dropout</span><br>            output = model(test_data_x)  <span class="hljs-comment"># 前向传播过程，输入为测试数据集，输出为对每个样本的预测</span><br>            pre_lab = torch.argmax(output, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 查找每一行中最大值对应的行标</span><br>            test_corrects += torch.<span class="hljs-built_in">sum</span>(pre_lab == test_data_y.data)  <span class="hljs-comment"># 如果预测正确，则准确度val_corrects加1</span><br>            test_num += test_data_x.size(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 当前用于训练的样本数量</span><br><br>    test_acc = test_corrects.double().item() / test_num  <span class="hljs-comment"># 计算在测试集上的分类准确率</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test accuracy:&quot;</span>, test_acc)<br><br><span class="hljs-comment"># 模型的训练和测试</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model_process</span>(<span class="hljs-params">myconvnet</span>):<br>    optimizer = torch.optim.Adam(myconvnet.parameters(), lr=<span class="hljs-number">0.001</span>)  <span class="hljs-comment"># 使用Adam优化器，学习率为0.001</span><br>    criterion = nn.CrossEntropyLoss()  <span class="hljs-comment"># 损失函数为交叉熵函数</span><br>    device = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>  <span class="hljs-comment"># GPU加速</span><br>    train_loader, class_label = train_data_process()  <span class="hljs-comment"># 加载训练集</span><br>    test_loader = test_data_process()  <span class="hljs-comment"># 加载测试集</span><br><br>    myconvnet = myconvnet.to(device)<br>    myconvnet, train_process = train_model(myconvnet, train_loader, <span class="hljs-number">0.8</span>, criterion, device, optimizer, num_epochs=<span class="hljs-number">25</span>)  <span class="hljs-comment"># 开始训练模型</span><br>    test_model(myconvnet, test_loader, device)  <span class="hljs-comment"># 使用测试集进行评估</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    model = ResNet()<br>    train_model_process(model)<br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li>分步实现resnet 其中【一】含有dataloader编写</li></ul><p><a href="https://blog.csdn.net/lai199508/article/details/84893915">Resnet for Fashion_Mnist（一）_lai199508的博客-CSDN博客</a></p><ul><li>整合的文章，一篇介绍完</li></ul><p><a href="https://blog.csdn.net/baoli8425/article/details/120071221?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3">卷积神经网络（ResNet-18）识别Fashion-MNIST数据集（Pytorch版）_奔跑的chanchanchan的博客-CSDN博客</a></p><ul><li>预处理三部分 比较完备</li></ul><p><a href="https://blog.csdn.net/xys430381_1/article/details/102886605">pytorch数据操作—dataset，dataloader，transform_xys430381_1的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog操作相关</title>
    <link href="/2021/04/01/blog_Init/"/>
    <url>/2021/04/01/blog_Init/</url>
    
    <content type="html"><![CDATA[<h1 id="建站教程"><a href="#建站教程" class="headerlink" title="建站教程"></a>建站教程</h1><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">小白向知乎教程</a><br><a href="https://blog.csdn.net/gzu_zb/article/details/109263919">迁移教程</a><br><a href="https://hexo.fluid-dev.com/docs/">该主题(fluid)的用户手册，很详细了</a><br>评论系统用的Waline</p><h1 id="编写查看"><a href="#编写查看" class="headerlink" title="编写查看"></a>编写查看</h1><p><a href="https://blog.csdn.net/ajacker/article/details/80301378">mathjax公式语法</a><br><a href="https://markdown.com.cn/cheat-sheet.html">markdown语法速查</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
